<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Here I Come</title>
  
  <subtitle>如何的春风得意也是人故事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hereicome.tk/"/>
  <updated>2020-05-14T07:22:14.199Z</updated>
  <id>http://hereicome.tk/</id>
  
  <author>
    <name>Anchor</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>北京人激怒器</title>
    <link href="http://hereicome.tk/p/12073.html"/>
    <id>http://hereicome.tk/p/12073.html</id>
    <published>2020-05-14T06:33:28.000Z</published>
    <updated>2020-05-14T07:22:14.199Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><s>没错我又来水博文了</s></p><h2 id="使用说明"><a class="markdownIt-Anchor" href="#使用说明"></a> 使用说明</h2><p>首先你得有Python，其次你得装个pyperclip包（因为居然没有自带）。然后复制下面这段代码，另存为成.py格式的文件（.py格式绑定了编辑器的小伙伴可以改成.pyw格式），然后在每次打算给北京人发消息之前，全选，复制，双击那个你存下来的py文件，然后覆盖粘贴即可。</p><p>高阶食用方法：可以通过修改代码调节气人率</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">rate = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">line = pyperclip.paste()</span><br><span class="line">str_list = list(line)</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; len(str_list):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'\u4e00'</span> &lt;= str_list[index] &lt;= <span class="string">'\u9fff'</span> <span class="keyword">and</span> str_list[index] != <span class="string">"儿"</span>:</span><br><span class="line">        <span class="keyword">if</span>(random.random()&lt;rate):</span><br><span class="line">            str_list.insert(index+<span class="number">1</span>,<span class="string">"儿"</span>)</span><br><span class="line">            index += <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">line = <span class="string">""</span>.join(str_list)</span><br><span class="line">pyperclip.copy(line)</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a class="markdownIt-Anchor" href="#效果展示"></a> 效果展示</h2><p>使用前：</p><blockquote><p>然后在每次打算给北京人发消息之前，全选，复制，双击那个你存下来的py文件，然后覆盖粘贴即可。</p></blockquote><p>使用后：</p><blockquote><p>然后儿在每次儿打儿算给北京人发儿消息儿之儿前，全选，复儿制儿，双儿击儿那个儿你存儿下儿来的儿py文件儿，然儿后覆儿盖儿粘儿贴儿即可。</p></blockquote><p>顺便：一键替换功能绝赞开发中，虽然说要获取窗口句柄什么的代码可能就不止这么短一点了……有想要的再私发吧。</p><p>花絮：如何假装你会Python：<br /><img src="/images/0514/1.png" alt="" /></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;s&gt;没错我又来水博文了&lt;/s&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用说明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#使用说明&quot;&gt;&lt;/a&gt; 使用说明&lt;/h2&gt;
&lt;p&gt;首先你得有Python，其次你得装个pyperclip包（因为居然没有自带）。然后复制下面这段代码，另存为成.py格式的文件（.py格式绑定了编辑器的小伙伴可以改成.pyw格式），然后在每次打算给北京人发消息之前，全选，复制，双击那个你存下来的py文件，然后覆盖粘贴即可。&lt;/p&gt;
&lt;p&gt;高阶食用方法：可以通过修改代码调节气人率&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://hereicome.tk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hereicome.tk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>浏览器A-Z挑战</title>
    <link href="http://hereicome.tk/p/34032.html"/>
    <id>http://hereicome.tk/p/34032.html</id>
    <published>2020-05-03T10:22:14.049Z</published>
    <updated>2020-05-04T14:53:14.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>显然，逛Dw的博客给我带来了大量的灵感，比如说她玩的<a href="https://dwscdv3.com/articles/My-2016-browser-auto-complete-A-Z" target="_blank" rel="noopener">这个</a>。</p><p>正值我用上了真正的Firefox的75天纪念日，想来也在地址栏输入了不少的URL了，是时候做一些泄露隐私的事情了（x）</p><p>规则很简单，在浏览器的地址栏输入26个字母，把浏览器自动提示的第一个网页留在这里，并且附上简单的介绍。</p><p>A: <a href="https://aktools.graueneko.xyz/" target="_blank" rel="noopener">https://aktools.graueneko.xyz/</a> 明日方舟工具箱，在我A掉之前一直用它规划刷图路线和计算公开招募。现在这个链接已经被重定向到bigfun下的某个子站了。</p><p>B: <a href="https://www.bilibili.com/" target="_blank" rel="noopener">https://www.bilibili.com/</a> 这就……不用介绍了吧。</p><a id="more"></a><p>C: <a href="moz-extension://cfa277ed-7228-4dd5-93f0-a046bad2a07f/">moz-extension://cfa277ed-7228-4dd5-93f0-a046bad2a07f/</a> 这个是我的Firefox的快速拨号插件生成的新标签页，也就是说我每开一个新标签页都会先进入这个网页。</p><p>D: <a href="https://dwscdv3.com/" target="_blank" rel="noopener">https://dwscdv3.com/</a> （捂脸）可能给我最近真的很stalker……什么时候能鼓起勇气去搭讪呢（不是）</p><p>E: <a href="https://ec.nintendo.com/" target="_blank" rel="noopener">https://ec.nintendo.com/</a> 任天堂的电子商店，我在那里买了动森和荒野之息的dlc</p><p>F: <a href="http://fangfang.blog.caixin.com/" target="_blank" rel="noopener">http://fangfang.blog.caixin.com/</a> 这……我之前做的一些志愿者工作，内容是检查一些涉及疫情的文章和报道是否有被删除或审核，所以去访问了很多次方方的博客抓包找还存活的页面和被删掉的页面之间有什么区别</p><p>G: <a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com/</a> 唯一G站，不服来辩</p><p>H: <a href="http://hereicome.tk/">http://hereicome.tk/</a> 自己的博客也就只能通过输地址来访问了Orz，也许以后哪一天能从唯一G站上搜到？</p><p>I: <a href="http://international.caixin.com/" target="_blank" rel="noopener">http://international.caixin.com/</a> 财新国际，理由同方方的博客</p><p>J: <a href="https://www.jiemian.com/" target="_blank" rel="noopener">https://www.jiemian.com/</a> 说实话我都不记得这个网页是啥……点开一看懂了，一般这种新闻门户网都是我之前搞那个志愿者工作的时候访问的</p><p>K: <a href="https://katex.org/" target="_blank" rel="noopener">https://katex.org/</a> KaTeX是在网页上支持LaTeX语法打数学公式的一个……工具？你在这个博客里看到的所有数学公式都来自KaTeX渲染器</p><p>L: <a href="localhost:4000/">localhost:4000/</a> emmm本地调试博客文章的服务器地址</p><p>M: <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a> 微信公众号的平台，说起来删文章什么的微信公众号是重灾区……要检查的文章有近两千篇，那天晚上一点反反爬虫都没做愣是挂了两个小时机检查完了……谢谢腾讯不反爬虫之恩。</p><p>N: <a href="https://new.qq.com/" target="_blank" rel="noopener">https://new.qq.com/</a> 腾讯的另一个新闻平台，话说回来新闻不应该是news吗……</p><p>O: <a href="https://outlook.live.com/" target="_blank" rel="noopener">https://outlook.live.com/</a> 我的狡兔三窟备用邮箱，就算你们知道是outlook也找不到的，嗯</p><p>P: <a href="https://www.programiz.com/" target="_blank" rel="noopener">https://www.programiz.com/</a> p站居然不是那个唯一p站我也有点震惊……天地良心我没有故意隐瞒，那个p站在自动补全的第四个。至于这个地址似乎是一个学编程的网站，但是我完全没有我曾经访问过的印象Orz</p><p>Q: <a href="https://www.qq.com/" target="_blank" rel="noopener">https://www.qq.com/</a> 腾讯门户网，这也不像是个新闻平台啊？我真的想不起来我什么时候输过这个网址……</p><p>R: <a href="https://www.runoob.com/" target="_blank" rel="noopener">https://www.runoob.com/</a> 菜鸟教程，我的CSS和JS都是这里现学现卖的</p><p>S: <a href="https://stepdatabase.maths.org/" target="_blank" rel="noopener">https://stepdatabase.maths.org/</a> STEP是剑桥大学出题的一个数学考试，用来筛选申请自己数学系的学生们（当然也有一些其他的大学和剑桥的其他专业也在用这个成绩来筛选申请者）。我现在在网上教STEP课程，会从这个网站里找真题。</p><p>T: <a href="https://twitter.com/" target="_blank" rel="noopener">https://twitter.com/</a> 推特，好像是想改密码的时候输入的这个URL</p><p>U: <a href="https://unity3d.com/" target="_blank" rel="noopener">https://unity3d.com/</a> Unity是一个游戏引擎……大概？ 我很久以前的Group Project， 大二暑期实习以及现在在带的一个学生的Extended Essay都用到这个工具。</p><p>V: <a href="https://view.inews.qq.com/" target="_blank" rel="noopener">https://view.inews.qq.com/</a> 凡是要我手打输入的新闻网站绝壁都是那天留下的记录</p><p>W: <a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a> 唯一G站因为自己是www开头的于是占据了w站的位置</p><p>X: <a href="https://xueqiu.com/" target="_blank" rel="noopener">https://xueqiu.com/</a> ……这啥啊这看起来也不像个新闻网站啊这也是那天留下的痕迹吗</p><p>Y: <a href="https://www.yicai.com/" target="_blank" rel="noopener">https://www.yicai.com/</a> 第一财经，其他的我已经说倦了反正你们都懂的</p><p>Z: <a href="https://www.zhihu.com/" target="_blank" rel="noopener">https://www.zhihu.com/</a> 非常无趣但也不太可能是别的站的Z站了。</p><p>总而言之这个挑战吧，其实并不能很代表我的上网习惯（所以也没有泄露很多隐私），这可能跟我换用Firefox日子确实不长有关，也跟我平时很少直接在地址栏输入URL来访问网页有关。但是总体来讲还算有趣，有些地方有「果然是你」的心领神会，有些地方也有「居然是你」的意料之外（比如说那个p站）。在移动化大潮浩浩荡荡不可阻挡的现在，桌面端浏览器确实越来越少人用了。诚邀看到这篇文章的朋友们，加入这个挑战，打开自己的电脑（行吧手机浏览器就手机浏览器吧），也试试看输入A-Z，看看自动提示会给出什么神奇的网址。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;显然，逛Dw的博客给我带来了大量的灵感，比如说她玩的&lt;a href=&quot;https://dwscdv3.com/articles/My-2016-browser-auto-complete-A-Z&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;正值我用上了真正的Firefox的75天纪念日，想来也在地址栏输入了不少的URL了，是时候做一些泄露隐私的事情了（x）&lt;/p&gt;
&lt;p&gt;规则很简单，在浏览器的地址栏输入26个字母，把浏览器自动提示的第一个网页留在这里，并且附上简单的介绍。&lt;/p&gt;
&lt;p&gt;A: &lt;a href=&quot;https://aktools.graueneko.xyz/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://aktools.graueneko.xyz/&lt;/a&gt; 明日方舟工具箱，在我A掉之前一直用它规划刷图路线和计算公开招募。现在这个链接已经被重定向到bigfun下的某个子站了。&lt;/p&gt;
&lt;p&gt;B: &lt;a href=&quot;https://www.bilibili.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/&lt;/a&gt; 这就……不用介绍了吧。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>除草计划</title>
    <link href="http://hereicome.tk/p/18526.html"/>
    <id>http://hereicome.tk/p/18526.html</id>
    <published>2020-05-03T08:11:30.000Z</published>
    <updated>2020-05-03T14:46:46.504Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="一篇流产的博文"><a class="markdownIt-Anchor" href="#一篇流产的博文"></a> 一篇流产的博文</h2><p>上一次想写点东西是什么时候呢？好像是4月22号之前的某段时间。那时候我的switch的右侧JoyCon滑轨出现了松动，也就是说：尽管JC好好的插在主机上，但是时不时就变成无线模式——要是switch能支持一边掌机一边无线也行，但它偏偏要求要么两个JC都连在主机上，要么两个JC都拔下来。那么糟糕的事情就发生了，游戏玩着玩着会突然失去控制，然后问你：正打算盾反人马的海拉鲁英杰啊，你是想用这个无线模式的右JoyCon呢，还是这个掌机模式的左JoyCon呢？如果想用左JoyCon的话就把右边那个插回主机（可是明明已经好好的插着了），想用右JoyCon的话就把左边那个也拔下来哦（可是我正躺在床上呢请问我要把主机屏幕用念力悬浮在眼前吗？），哦对了，在你思考期间你的小林克已经被人马一棒槌送去见米法了哦~</p><a id="more"></a><p>这种游戏体验显然是不可接受的，所以动动小脑筋就很有必要了。首先是上网查找了之后发现这种现象一般都由于JoyCon的那个塑料滑轨的固定非常俭朴，经过一段时间的侧卧玩仰卧玩葛优瘫玩switch这样不均衡受力之后就会变形松动，导致滑轨里藏着的金属触点与主机接触不良。其次是上了淘宝找一找发现这种滑轨也就十来块钱一个，远低于找人维修的成本。那么自己换个滑轨似乎就顺理成章了。</p><p>//小插曲，家里的螺丝刀没有拆switch用的y形，所以又买了套新的，店家那里买螺丝刀顺便送了一整套分件器吖加磁消磁器吖镊子吖吹灰器吖一大堆杂七杂八的工具。收到之后拆开包裹一件一件摆在桌面上时候感受到了一种奇妙的快感。<span class="heimu" title="好孩子不要点开">就好像涩图里把小玩具一件一件摆在床上一样</span></p><p>前期收集资料的时候我就想着，这次拆switch说不定能水成一篇博客，连文章结构都构思好了。这股冲动在收到了新工具的时候发展到最旺盛。然而等我真的把JoyCon拆开来的时候才发现——根本找不到适合停下来拍照的时机嘛！正经人谁在拆JoyCon的时候停下来拿起手机拍个照啊！于是这一篇博文就永远停留在了构思阶段。</p><p>但总之，switch算是修好了，看在滑轨那么便宜的份上我决定完全不从此次事件中吸取任何教训，继续躺着玩趴着玩歪着玩<span class="heimu" title="很想试一试但还没有实现过">绑着玩</span>，大不了坏了再换一个。</p><h2 id="一个开发中的功能"><a class="markdownIt-Anchor" href="#一个开发中的功能"></a> 一个开发中的功能</h2><p>想必你们也注意到了，这个博客从现在开始支持黑幕文字了。遗憾的是在移动化大潮的侵袭下，用电脑看博客的人越来越少了，黑幕条条也失去了原有的表达力和交互感。不过反正是一个实现起来不难也不会拖累多少加载速度的小功能，<span class="heimu" title="这才是重点">再加上有些羞羞的事情要遮掩一下才会更刺激</span>，所以还是加上了。</p><p>实现也很简单，写个js脚本注册成Hexo的Tag插件，把需要黑幕的文字套进一个<code>&lt;span class=&quot;heimu&quot;&gt;</code>就好了，接下来就是对这个class搞一通css即可。</p><p>当然，标题中的「开发中的功能」指的不是这个。而是我前段时间逛<a href="https://dwscdv3.com/about" target="_blank" rel="noopener">Dw的博客</a>。)时注意到的她左边有一个随机出现的格言（？）窗口。看了看源代码大概是静态明文储存然后用onclick事件实现的随机切换。既然不需要动态支持那么看来在我的Hexo上也是可以实现的，况且好玩，想泳有。可以用来放一些碎碎念或者名台词什么的，甚至可以调节出现的概率。</p><p>另外还有就是，根据这个随机格言中的某几句提供的线索，在她的博客主界面按某一顺序按键就能进入里世界（雾）。这个也好玩，而且看起来也不难实现。所以打算我也要搞一个神秘口令之类的交互，里面放一些明明可见人但是又不可见人的东西。而且线索最好不要和其他的碎碎念同等概率出现……至少也要等用户点上个十几二十次的才提供嘛。</p><p>有空就搞，有空就搞<span class="heimu" title="undefined">指中二能量积攒充足了就搞</span></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一篇流产的博文&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一篇流产的博文&quot;&gt;&lt;/a&gt; 一篇流产的博文&lt;/h2&gt;
&lt;p&gt;上一次想写点东西是什么时候呢？好像是4月22号之前的某段时间。那时候我的switch的右侧JoyCon滑轨出现了松动，也就是说：尽管JC好好的插在主机上，但是时不时就变成无线模式——要是switch能支持一边掌机一边无线也行，但它偏偏要求要么两个JC都连在主机上，要么两个JC都拔下来。那么糟糕的事情就发生了，游戏玩着玩着会突然失去控制，然后问你：正打算盾反人马的海拉鲁英杰啊，你是想用这个无线模式的右JoyCon呢，还是这个掌机模式的左JoyCon呢？如果想用左JoyCon的话就把右边那个插回主机（可是明明已经好好的插着了），想用右JoyCon的话就把左边那个也拔下来哦（可是我正躺在床上呢请问我要把主机屏幕用念力悬浮在眼前吗？），哦对了，在你思考期间你的小林克已经被人马一棒槌送去见米法了哦~&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>一份新的自我介绍的节选</title>
    <link href="http://hereicome.tk/p/32509.html"/>
    <id>http://hereicome.tk/p/32509.html</id>
    <published>2020-03-24T08:28:45.000Z</published>
    <updated>2020-03-24T10:11:20.719Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>不是女权主义者，充其量是女权主义运动同情者。我不应该take credit for一项我没做出过什么贡献的事业。更不可以此自我标榜、或骗取同情与好感，你应该认清我是怎样的人。不要因为看到我满嘴Gender-inclusive language或者跟性别偏见/父权言论对着刚就觉得我多先进了，对于前者，我只是觉得平常的语言中暗示的性别偏见让我不爽；对于后者，更多你没看到的时候我都选择了沉默，怂得很。</p><a id="more"></a><p>是很懦弱的一个人，杏仁核里的「战或逃」机制90%的时间选择逃，剩下还有9%的时间选择呆若木鸡冷抖哭。在网上看到两拨人对骂，看哪边都觉得是在骂自己，然后内心受伤。也会想要爱与同情，但是，再强调一遍，不是那种骗来的对有功者的爱与同情。</p><p>不过倒是很会为懦弱辩护，坚信每个人都应该有逃避的权利——哪怕是眼睁睁看着世界坏掉也可以。我从来不觉得雪崩的时候雪花应该是有罪的。我们应该找到一种正确的堆放雪花的方式让它不会崩，而不是寄希望于两片雪花之间的小小氢键可以对抗一整个地球的引力。</p><p>抱歉用了文学化的描述……我知道其实上面那段漏洞百出。但是至少我确实在用一些机制化、结构化的方式在试图弥补作为人类的渺小与脆弱。比如说我最近一直在找科学的方式训练自己的杏仁核（指在荒野之息里一直打人马一直死）。还算有效，已经不是之前玩J3时候那种一看到红名就脑子宕机只会那个技能亮了就按哪个的状态了。</p><p>脑子宕机真是个精妙的比喻，人脑也不过一图灵机，做不出的数学题就是做不出来，情绪动力缺乏的时候憋尿憋到膀胱爆炸也起不来床。所以之前照顾抑郁症患者的经历教会我的是，尽量把生活弄得smooth一点，降低每一件事的启动能量，然后让每件事的反馈来得快一点。大概地铁站要修无障碍通道也是类似的道理。</p><p>个人生活能不能推广到整个社会呢？我猜可以的吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不是女权主义者，充其量是女权主义运动同情者。我不应该take credit for一项我没做出过什么贡献的事业。更不可以此自我标榜、或骗取同情与好感，你应该认清我是怎样的人。不要因为看到我满嘴Gender-inclusive language或者跟性别偏见/父权言论对着刚就觉得我多先进了，对于前者，我只是觉得平常的语言中暗示的性别偏见让我不爽；对于后者，更多你没看到的时候我都选择了沉默，怂得很。&lt;/p&gt;
    
    </summary>
    
    
      <category term="想法" scheme="http://hereicome.tk/categories/%E6%83%B3%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>近期长票圈归档</title>
    <link href="http://hereicome.tk/p/33146.html"/>
    <id>http://hereicome.tk/p/33146.html</id>
    <published>2020-03-20T01:57:13.000Z</published>
    <updated>2020-03-20T02:43:15.250Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>新开一个category，本来想放日记的，但是我想在日记里面放一些轻松的，感性的，读完之后获得一些情绪体验的东西；以前这种说理的文字都归在政治那一类里，但是放去政治吧，又有一些票圈其实聊得不那么政治。</p><p>干脆慢慢的把之前聊的政治内容也全部挪到想法分类下好了。</p><a id="more"></a><h2 id="2020-3-20"><a class="markdownIt-Anchor" href="#2020-3-20"></a> 2020-3-20</h2><blockquote><p>我有点分不清方方说的「极左」是什么意思了——不如说就算方方没说我也不太知道「极左」是什么意思。</p><p>我觉得我的想法其实也有点过于左：我讨厌「报复主义」，我认为有些人虽然不说人话、不做人事，但是在我们的理想之中，他们最终也是要获得自由与平等的。而他们之所以会变成「坏人」（当然也和他们自己本来就坏有关系不过）更多的是因为现在的这个结构里有「坏人的位置」。所以去打他们骂他们编恶心段子侮辱他们也没什么意义，甚至于理想有伤，不如把工作量放在改进结构上——Quote一句名言:「最好的体制可以让即使是很恶的人也能做好事」。</p><p>虽然我也承认改进结构的进程中总是要无可避免地去粉碎一些绊脚石，也总是要杀一些人诛一些心剥夺一些人的权利的，但是我会认为「敌人」的损失——指损失一些他们本该有的权利比如说生理与精神的健康或者自由表达权，而不是损失那些不良的结构赋予他们的不平等的额外的东西——也当做是惨痛的，要尽量避免的牺牲。</p><p>我以为的「极左」就是比我再左一点，到了「不准杀人，无论我们付出多少牺牲都要找到一个人都不杀的让世界结构变更美好的方法」的那种……可是现在看来大家在说的极左是「你胆敢有一点右倾思想我就打爆你的狗头」这样子的……？搞独裁和一言堂不是右派的做法吗？</p></blockquote><h2 id="2020-3-16"><a class="markdownIt-Anchor" href="#2020-3-16"></a> 2020-3-16</h2><blockquote><p>不是，凭什么不让人反思制度？</p><p>一件坏事发生了，一些损害被造成了或者一些隐患被埋下了，不管它看起来多么像「人犯了错」，我们总是可以找到更优越更完善的制度去规避这个错误或者让人就算犯了错也不会有多大损失的。人类文明的发展过程不就是一个不断用更好的制度去让人可以更自由随性有尊严地活着的过程吗？所以，「已经够好了」，甚至哪怕是「已经是世界上最好的了」都构成不了一种制度免疫反思与质疑的理由，还没让全国所有人都顿顿吃上土豆牛肉呢，就搁这儿固步自封了？</p><p>至于「还有那么多人受病毒威胁你能不能先干点实事少聊这种空话」就更加是一面草包挡箭牌了：非洲还有那么多小孩在挨饿呢你能不能先别研究分子生物学这种看不见摸不着的东西了？</p><p>想来想去有些人要阻止另一些人反思制度的唯一立得住的理由就是：「我们是现行制度的既得利益者，你要反思这种制度就是断我财路杀我父母」真的，这个理由立得住。而且你看，听起来自私丑恶的理由居然比听起来冠冕堂皇的借口有道理多了。我不是在讽刺这些自私者，自私是人性自然规律，就像地球有引力一样自然。房子塌了，不会有人怪地心引力的，要怪也只能怪这个房子结构头重脚轻力学结构不合理——看吧，说到底还是这个（让一部分人以为自己是既得利益者的）制度的错。</p><p>我们的制度要反思的地方多了去了。</p></blockquote><h2 id="2020-3-16-2"><a class="markdownIt-Anchor" href="#2020-3-16-2"></a> 2020-3-16</h2><p><em>这条票圈是看到有位网友转发了在一个叫「中国医院人文建设」的「全国性非盈利性社会公益组织」网站上转载的《发哨子的人》并配文：「朋友发现，大家都在疯狂拯救此文时，此文一直在卫健委的文章待得好好的」 （语病是原文中就有的，未作修改）。</em></p><p><em>当时我以为真的是卫健委，所以发了这样的一条，后来才发现这其实不是。所以原文中有一些内容要作废了</em></p><blockquote><p>不算挂人，不贴名字，最多算个未经授权的转发吧。</p><p>要承认的是第一眼看到的时候这个语气让我不太舒服的（虽然有很大概率只是误会），因为它似乎暗示了「网友的疯狂拯救」是无意义的无用功——但是我现在不是想批判这里的用词不够精致，或者对这位朋友进行恶意的揣测，我想聊的是另一件事。</p><p>有一件可能不那么众所周知的事情是，被微信微博删掉的文章中，只有很少一部分是来自「上面」的授意，更多的，则是平台的自我审查——所以出现了问卷星删掉人日的文件、微博限流青团的账号、以及微信疯狂删哨子的奇景。</p><p>但是知道了这个信息之后并不意味着删帖的都是微信所以「上面」就是纯洁无辜的了，恰恰相反，平台的自我审核红线畸形至此，还不是因为「天意从来高难测，就不告诉你哪个该删哪个不用删」吗。还不是因为「不必删的删了不过被网友骂一通，该删的没删就得死」吗？</p><p>我想起肖战事件背后的那个幽灵恶鬼，它把致命的刀子随意摆在路边还挂起了「免费使用」的牌牌，然后它飘在一边悠然自得天真无辜地看着两拨人吵架了，一拨人看到了这个免费使用捡起刀子就开始乱挥——反正是他们俩打架，关我屁事？</p><p>看，这个转移矛盾的技巧，堪称妙极。现在发现一方的愤怒压不住了的时候，起来轻轻撇干净自己「我可没说要删，你看我官媒上这篇文章活得好好的么」。高，令人叹服。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新开一个category，本来想放日记的，但是我想在日记里面放一些轻松的，感性的，读完之后获得一些情绪体验的东西；以前这种说理的文字都归在政治那一类里，但是放去政治吧，又有一些票圈其实聊得不那么政治。&lt;/p&gt;
&lt;p&gt;干脆慢慢的把之前聊的政治内容也全部挪到想法分类下好了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="想法" scheme="http://hereicome.tk/categories/%E6%83%B3%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>虽然不是很牛逼但是我依然叉会腰</title>
    <link href="http://hereicome.tk/p/32539.html"/>
    <id>http://hereicome.tk/p/32539.html</id>
    <published>2020-03-12T09:34:37.000Z</published>
    <updated>2020-03-12T12:35:08.724Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>简单介绍一下吧，曾经有一群可爱的志愿者们，收集了疫情期间社会上各种各样的女性的报道，整合在石墨文档里，命名为「看见疫情中的女性」，然后毫无意外地，被石墨和谐了。</p><p>所以他们就想着把这个内容放到别的没那么自我阉割的但是又能让墙内网友看到的平台上去，于是他们想到了GitHub……</p><p>也许是因为我正好刚刚学到了相关的技术，也许是被项目发起人的个人魅力所<s>勾</s>吸引，总之，经历了半天的敏捷开发，<a href="https://womeninncov.github.io/" target="_blank" rel="noopener">这个网站</a>在昨天半夜火速上线了。</p><h2 id="需求分析方案策划"><a class="markdownIt-Anchor" href="#需求分析方案策划"></a> 需求分析，方案策划</h2><p>在我接受挑战（？）之前，石墨文档上的东西已经没了，我们手上仅有一份xlsx文件，里面的内容嘛，大致如网页中所见，就是一个目录，与被分别归类好的很多文章链接。</p><a id="more"></a><p>所以我们要做出放这样一个网站：首先，它要能够被墙内的网友看到；其次，它要尽可能地还原原来石墨文档中的内容与格式；最后，它还要尽量让没有技术背景的编辑们能够顺畅地增删更新。在与志愿者团队们以及几位亦有意向帮忙的技术朋友讨论之后，我们最终敲定了「使用Markdown编辑内容」，「使用一个VS Code插件将其打印成html文件」以及「使用GitHub Pages将这个html展现出来」这样三步走的方案。在我们的Git repo中，只留下一个Markdown文件和一个HTML文件。</p><p>之所以采取这样的方案是基于如下考虑：</p><ol><li>因为目前只存链接，所以我们可以不用在GitHub repo里设计用来保存备份文章的存档系统，所有的一切都可以在一个<code>index.html</code>里完成。</li><li>原xlsx文件中的排版跟Markdown的兼容性非常好，甚至一眼就能看出来这东西要是用上了Markdown该怎么写。</li><li>Visual Studio Code以及相关插件的使用体验和学习曲线都非常用户友好，全程不用任何命令行，容错非常高。而且几乎可以覆盖整一个拉取<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span></eq>编辑<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span></eq>生成网页<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span></eq>推送上传的工作流程。</li><li>如果日后还有扩展的需求，比如注册一个独立的域名，或者引入css进行排版，都可以在不影响编辑的工作流程、不额外增加编辑学习成本的情况下进行。</li></ol><h2 id="实操记录"><a class="markdownIt-Anchor" href="#实操记录"></a> 实操记录</h2><p>部署这套方案中最技术相关的行动可能就是帮编辑们安装本地环境了吧……因为此前没接触过GitHub，编辑们的账号都是现场申请的Orz。不过Git这种装过一遍用一辈子<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="指电脑的一辈子">[1]</span></a></sup>的事情，容易忘也正常，就在这里记个备忘——毕竟谁知道会不会过两天又新加入一个编辑呢。</p><p>Windows版本的Git从<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">这里</a>下载，下载完安装时一路默认就行，然后注册上自己的用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Username&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>接下来生成一个ssh key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>一路默认，passphrase留空，（想不留空也行但是用ssh不就是不想输密码吗），最后就能在Users文件夹里找到一对ssh密钥了。将公钥复制到自己GitHub的配置上就可以通过ssh来链接GitHub了。</p><p>下载VS Code，安装<a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one" target="_blank" rel="noopener">Markdown All in One</a>插件（顺便一提，这是我交出我人生第一个PR的repo），我们将用到这个插件中的生成ToC功能以及打印到HTML功能。</p><p>接下来把我们的repo给git clone到本地就行了。在VS Code对Git的支持下，我们的编辑可以（几乎）纯鼠标地完成pull、commit和push操作。（merge不太行，所以得让编辑每次开始工作之前都先pull一下）。</p><h2 id="后续扩展"><a class="markdownIt-Anchor" href="#后续扩展"></a> 后续扩展</h2><p>最明显的一个问题是，Markdown渲染出来的网页太简陋了……于是我稍微加入了一点css。</p><p>考虑到引入css这件事情要完全对编辑透明，所以不能把css写在Markdown里……更不能等html被生成出来之后再手动加<code>&lt;style&gt;</code>标签。好在插件支持带css生成html的。只要把写好的css放在同一目录下然后在VSCode里设置一下采用这个css就行。这就不得不提一嘴VSCode的另一个特性了：它的工作区设置是以json格式存在同一目录下的，所以只要我把这个css和配置文件一并加入repo，在编辑那里就会自动应用我的设置。这样，对编辑来讲，多了两个不认识但是反正也不用去碰的文件（夹），姑且也算是透明了。</p><h2 id="额外特性"><a class="markdownIt-Anchor" href="#额外特性"></a> 额外特性</h2><p>哦对了，昨天还炖了锅土豆牛肉，是那种加洋葱和番茄的社会主义风格。倒是挺好吃的，但是总觉得比起八角桂皮茴香那个口味的来，少了点中国特色。<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">指电脑的一辈子<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍一下吧，曾经有一群可爱的志愿者们，收集了疫情期间社会上各种各样的女性的报道，整合在石墨文档里，命名为「看见疫情中的女性」，然后毫无意外地，被石墨和谐了。&lt;/p&gt;
&lt;p&gt;所以他们就想着把这个内容放到别的没那么自我阉割的但是又能让墙内网友看到的平台上去，于是他们想到了GitHub……&lt;/p&gt;
&lt;p&gt;也许是因为我正好刚刚学到了相关的技术，也许是被项目发起人的个人魅力所&lt;s&gt;勾&lt;/s&gt;吸引，总之，经历了半天的敏捷开发，&lt;a href=&quot;https://womeninncov.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个网站&lt;/a&gt;在昨天半夜火速上线了。&lt;/p&gt;
&lt;h2 id=&quot;需求分析方案策划&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#需求分析方案策划&quot;&gt;&lt;/a&gt; 需求分析，方案策划&lt;/h2&gt;
&lt;p&gt;在我接受挑战（？）之前，石墨文档上的东西已经没了，我们手上仅有一份xlsx文件，里面的内容嘛，大致如网页中所见，就是一个目录，与被分别归类好的很多文章链接。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://hereicome.tk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>请务必不要节约一次性抹布</title>
    <link href="http://hereicome.tk/p/7476.html"/>
    <id>http://hereicome.tk/p/7476.html</id>
    <published>2020-03-04T12:15:57.000Z</published>
    <updated>2020-03-04T14:11:02.748Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>好，我做完了回上海以来的第一次扫除。</p><p>对于一个脑子不够用的人来讲，working pipeline越短越好，抹布这种东西，擦完可以直接扔掉再扯一块绝对比每次擦一会就得判断一下是不是脏到要洗了，洗个几次还要清理水槽给人的心力上的消耗小。一次性抹布真快乐，多来点。</p><p>突然想到以前看过一个段子，说有个直男委屈巴巴「我也有在帮你分摊家务啊，你叫我洗碗我就洗碗了嘛，我又不是故意不刷锅的我不知道呀，你叫我刷锅我也去了嘛」</p><p>哥们儿，你这根本不叫分摊家务好嘛，做家务又不是擦擦洗洗，做家务最难的是知道哪里要擦擦洗洗好嘛。这是一个整合了问题定位、方案设计、流程优化、执行操作、评估结果多个步骤的大工程……你就分摊了最简单的一步也好意思叫分摊？</p><a id="more"></a><p>哪怕是带着数十年软件工程经验的我（靠这个不会能成梗吧），每次发现家里好像没那么桌明几净宽敞舒适了的时候，也要花好久tracing才能找到到底哪里出的问题。更何况定位问题之所在之后——往往是一大堆小问题的集合——还要设计一个高效的维护方案来尽可能低成本地解决这批小问题。房子又不是电脑，感觉卡卡的重启一下就好了。</p><p>不过这也怪我每次给家里加功能的时候也不怎么考虑可维护性，久而久之各个功能之间耦合<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="指几个不同的模块互相影响，牵一发动全身，没办法把其中某一个单独挑出来调整或者使用">[1]</span></a></sup>极强，几个部件之间经常发生死锁<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="比如说，洗杯子要用水龙头，但是水槽里泡着还没洗的电饭锅内胆，那么在把电饭锅洗完之前就不能洗杯子。但是在碗架上的碗晾干之前，就算电饭锅洗了也没地方晾……">[2]</span></a></sup>，想喝杯牛奶需要先等洗衣机洗完衣服这种流程你敢信？</p><p>是时候重构<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="工程术语，在不改变功能的前提下把项目的结构变得更合理（通常是更容易维护和扩展）">[3]</span></a></sup>了</p><p>写完上面三个脚注我回去给这篇文章的tags里面加上了「讲给外行的编程」……整挺好，反正随便拿两样东西来硬要扯都是扯得出共同点来的，吸引点人对计算机感兴趣也是好事。</p><p>想到了另一件事，昨天本来想写篇深刻的社会学思考，奈何自己接受过的学术训练实在不足，写着写着竟然有一种刚会了微积分去看辛几何的迷惑感……（甲乙丙丁戊己庚几何在哪？）最后一气之下干脆全删了。但总之我本来想说的是我们可以对人宽容一点，对制度苛刻一点。哪怕是人做的不好也可以甩锅给制度。不要把希望寄托在一个人特别牛逼特别伟大上，去允许人犯错，然后用先进优越的制度去兜住人犯的错误避免造成灾难性的后果……</p><p>之所以会想到这个是因为我又拿编程举例子了……我说有种制度叫peer programming，一个人写代码另一个人盯着看，有助于降低那些因为思维定势死活查不出来的错误（以及带来一些其他的好处）。人脑的局限性其实特别强（得过精神类疾病的我疯狂点头），注意力触及不到的地方就是跟瞎了一般触及不到，所以我们会想开发越来越牛逼的IDE来做错误提醒，会搞出小黄鸭调试法<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="写好代码后并不自己检查，而是在桌子上摆一个小黄鸭——就洗泡泡浴时候玩的那种——然后假设它一点编程都不懂，然后一行行给它解释你的代码。往往解释着解释着你就反应过来卧槽这边不该这么写的……">[4]</span></a></sup>这种东西，会发明出peer programming这种制度……</p><p>所以你看我在隔离期间闲出屁来去比对围棋AI的时候说的是「这要从一个没及时反应的官僚说起……」。这里的官僚当然指的是官僚系统而不是某个具体的官员，P社那篇文章也说的深得我心，它说作为一个理性利己的官员，在现行的政绩评判制度下最优的做法自然是压消息和瞒报。所以错的还是体制嘛。</p><p>这么说来其实用一次性抹布替代传统抹布也是一种通过改进制度（规章/流程/结构）来增加对人的宽容度的行为，让抗压能力这么差的我也能成功打扫卫生了。真好，首尾呼应，圆回去了。<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">指几个不同的模块互相影响，牵一发动全身，没办法把其中某一个单独挑出来调整或者使用<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">比如说，洗杯子要用水龙头，但是水槽里泡着还没洗的电饭锅内胆，那么在把电饭锅洗完之前就不能洗杯子。但是在碗架上的碗晾干之前，就算电饭锅洗了也没地方晾……<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">工程术语，在不改变功能的前提下把项目的结构变得更合理（通常是更容易维护和扩展）<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">写好代码后并不自己检查，而是在桌子上摆一个小黄鸭——就洗泡泡浴时候玩的那种——然后假设它一点编程都不懂，然后一行行给它解释你的代码。往往解释着解释着你就反应过来卧槽这边不该这么写的……<a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好，我做完了回上海以来的第一次扫除。&lt;/p&gt;
&lt;p&gt;对于一个脑子不够用的人来讲，working pipeline越短越好，抹布这种东西，擦完可以直接扔掉再扯一块绝对比每次擦一会就得判断一下是不是脏到要洗了，洗个几次还要清理水槽给人的心力上的消耗小。一次性抹布真快乐，多来点。&lt;/p&gt;
&lt;p&gt;突然想到以前看过一个段子，说有个直男委屈巴巴「我也有在帮你分摊家务啊，你叫我洗碗我就洗碗了嘛，我又不是故意不刷锅的我不知道呀，你叫我刷锅我也去了嘛」&lt;/p&gt;
&lt;p&gt;哥们儿，你这根本不叫分摊家务好嘛，做家务又不是擦擦洗洗，做家务最难的是知道哪里要擦擦洗洗好嘛。这是一个整合了问题定位、方案设计、流程优化、执行操作、评估结果多个步骤的大工程……你就分摊了最简单的一步也好意思叫分摊？&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="http://hereicome.tk/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="讲给外行人的编程" scheme="http://hereicome.tk/tags/%E8%AE%B2%E7%BB%99%E5%A4%96%E8%A1%8C%E4%BA%BA%E7%9A%84%E7%BC%96%E7%A8%8B/"/>
    
      <category term="生活" scheme="http://hereicome.tk/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="家务" scheme="http://hereicome.tk/tags/%E5%AE%B6%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>卟</title>
    <link href="http://hereicome.tk/p/53044.html"/>
    <id>http://hereicome.tk/p/53044.html</id>
    <published>2020-02-25T05:27:53.000Z</published>
    <updated>2020-03-02T13:42:43.344Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这几天真的好肝啊……也不知道是因为公开出柜带来的快乐还是因为隔离了压力来源。但总之就是做了好多事情，以至于现在有一种贤者时间般的虚脱感。不码了，不码了，再也不码字了。</p><p>今天早上做了个梦，想记下来；昨天早上看完了浅葱喵的那个视频，也想说点啥；这几天还一直在折腾这个博客的程序（我3分钟快速掌握JS可把我牛逼坏了叉会腰.jpg），也得记。</p><p>前两者不说倒也没关系，不外乎就是又跟哪个小姑娘谈了个恋爱发生了一点跌宕的情节，或者是「我觉得同样是无限循环的时间还是石头门的铃羽线更真实一点」之类的。最后一个不记不行。根据我<s>数十年</s>的软件工程经验，一个项目，如果你不把你做的每一点修改以及你为什么要这么做给记下来，那么日后你再想维护的时候就会面对一坨屎山……虽然现在这东西已经在往屎的方向发展，因为我已经忘了我前天搞了些啥了。</p><a id="more"></a><p>顺便，因为没有写额外的插件而是直接在别人的插件上瞎搞所以很很容易更新一下版本然后我的瞎搞就全没了/跟新版本冲突了。所以记下来就更有必要了。</p><h2 id="改进上一篇下一篇的逻辑"><a class="markdownIt-Anchor" href="#改进上一篇下一篇的逻辑"></a> 改进「上一篇」「下一篇」的逻辑</h2><p>首先是，Hexo NexT自带的 “Next”、“Prev” 导航栏是很反直觉的。具体而言，它的&quot;Next&quot; 放在右边，中文名叫「下一篇」——到这都还没问题——但是链接指向的却是时间轴意义上的「下一篇」，也就是「发布时间更晚」的那篇，也就是在主页上处在「上面」的那篇……怎么看怎么都不太对。解决这个问题很简单，去<code>themes/next/layout/_macro/post.swig</code> 找到<code>&lt;div class=&quot;post-nav&quot;&gt;</code>那一框，在里面把<code>next</code>和<code>prev</code>的位置/链接关系反一反就好了。</p><p>第二个问题是，我安装了<a href="https://github.com/netcan/hexo-generator-index-pin-top/blob/master/README.md" target="_blank" rel="noopener">置顶插件</a>，把我的<a href="/p/64077.html" title="第一篇博文">第一篇博文</a>置顶了。但是置顶完了之后它的「上一篇」「下一篇」指向的还是原来的位置……这就比较不爽，因为如果是一个陌生人点进这个博客来看完置顶之后就会被直接引导到第二古老的文章去，但显然我更希望大家能多看看新的东西……毕竟人是会变的，那个时候自己写的说不定现在都不同意了呢。所以我希望所有文章的「上一篇」「下一篇」能够按主页而不是<a href="/archives/">归档</a>里的顺序开始显示。</p><p>所以我开始想到继续改<code>post.swig</code>，在里面引入一些判断是否是top，如果是的话就把原来的上一篇链接删掉然后下一篇指向时间线上最新的那篇……但是这个太ad hoc了，万一我以后换了个置顶怎么办？以后有了多篇置顶怎么办？况且还不知道怎么找时间线上最新那篇呢……</p><p>所以还是得从置顶插件入手。点开代码一看——嚯，中文注释。</p><p>不过整个程序还算好理解，简而言之就是作者手写了一个以「是否有top属性」和「发布日期」为依据的排序器，然后把所有的<code>posts</code>都取出来重新排了个序再放回去。看起来似乎<code>prev</code>和<code>next</code>的链接是在排序之前就生成好了（不然早就自动按主页顺序安排上一篇下一篇了），所以稍微加一点代码让这个插件重新安排一下排好序之后的<code>posts</code>列表就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = posts.data.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">  posts.data[i].next=posts.data[i+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">posts.data[len<span class="number">-1</span>].next=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">  posts.data[i].prev=posts.data[i<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">posts.data[<span class="number">0</span>].prev = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>//我知道可以合并起来写，随便了，IDGAS<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="I Don't Give A S**t.">[1]</span></a></sup>。</p><h2 id="更换并优化数学公式渲染器"><a class="markdownIt-Anchor" href="#更换并优化数学公式渲染器"></a> 更换并优化数学公式渲染器</h2><p>之前用的是MathJax，慢不说，bug还很多。在那篇讲量子计算的文章里搞出了很多灵异事件。于是决定干脆整体迁移到<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>KaTeX</mtext></mrow><annotation encoding="application/x-tex">\KaTeX</annotation></semantics></math></span></eq>上去。但是谁能想到<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>KaTeX</mtext></mrow><annotation encoding="application/x-tex">\KaTeX</annotation></semantics></math></span></eq>的bug更多呢（甚至就在刚才还出现了新bug打断了我Orz）</p><p>好，让我们抛去那些试错的时间不谈，在整个事情大功告成之后回头来看看——如果不幸一道惊雷劈中了我的电脑，如果有幸坐在电脑前30cm的我又安然无恙，那我要如何在下载安装新的博客之后再把它定制化成现在这个样子。</p><p>首先，我们要卸掉原版的渲染器，然后装上一个牛逼哄哄的新的渲染器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure><p>其次，这个PLUS自带的<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>KaTeX</mtext></mrow><annotation encoding="application/x-tex">\KaTeX</annotation></semantics></math></span></eq>插件不支持macro（你知道量子计算机那篇我打狄拉克括号打得多累嘛！），所以我们还得自己装一个上去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i markdown-it-texmath</span><br></pre></td></tr></table></figure><p>然后，我们找到<code>node_modules\hexo-renderer-markdown-it-plus\lib\renderer.js</code>,在里面找到那个<code>def_pugs_lst</code>然后一通瞎搞。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> def_pugs_lst = [</span><br><span class="line">    <span class="string">'markdown-it-emoji'</span>,</span><br><span class="line">    <span class="string">'markdown-it-sub'</span>,</span><br><span class="line">    <span class="string">'markdown-it-sup'</span>,</span><br><span class="line">    <span class="string">'markdown-it-deflist'</span>,</span><br><span class="line">    <span class="string">'markdown-it-abbr'</span>,</span><br><span class="line">    <span class="string">'markdown-it-footnote'</span>,</span><br><span class="line">    <span class="string">'markdown-it-ins'</span>,</span><br><span class="line">    <span class="string">'markdown-it-mark'</span>,</span><br><span class="line">    <span class="comment">// 'markdown-it-katex',</span></span><br><span class="line">    <span class="comment">//'@iktakahiro/markdown-it-katex',</span></span><br><span class="line">    <span class="string">'markdown-it-texmath'</span>,</span><br><span class="line">    <span class="string">'markdown-it-toc-and-anchor'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>//其实把两个<code>markdown-it-katex</code>注释掉就行，不用非把texmath加进去，因为后面还要给人家加macro呢……</p><p>至此，第一步大功告成，接下来处理texmath插件自己的问题：首先我们找到<code>node_modules\markdown-it-texmath\texmath.js</code>，然后在它的第一个function之前添上两行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> katex = <span class="built_in">require</span>(<span class="string">'katex'</span>);</span><br><span class="line">texmath.katex = katex;</span><br></pre></td></tr></table></figure><p>//别问我为啥要分两行，我现在自己看着也觉得很迷惑，反正也不是第一次把JS写丑了……我说一句无所谓反正JS本来就丑会不会被打（</p><p>以及刚刚新鲜出炉的bug是它会把一个公式渲染两次，同时输出一个mathml和一个html……昨天还好好的呢今天突然就这样了。解决方案是找到它的调用<code>renderToString</code>那一行，给这个调用加个参数，让它只输出mathml：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = texmath.katex.renderToString(tex,&#123;<span class="attr">throwOnError</span>:<span class="literal">false</span>,displayMode,macros,<span class="attr">output</span>:<span class="string">"mathml"</span>&#125;);</span><br></pre></td></tr></table></figure><p>最后的最后就是给它实现macro了——这一步也很丑，到现在还没找到每篇post单独配置的方法，只能在Hexo的<code>_config.yml</code>里面加入对renderer插件的配置，然后让renderer把macro参数传给texmath：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">markdown_it_plus:</span></span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="attr">plugins:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">markdown-it-texmath</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">options:</span></span><br><span class="line">              <span class="attr">macros:</span></span><br><span class="line">                <span class="string">"\\ket"</span><span class="string">:</span> <span class="string">"\\mathinner&#123;|#1\\rangle&#125;"</span> </span><br><span class="line">                <span class="string">"\\bra"</span><span class="string">:</span> <span class="string">"\\mathinner&#123;\\langle #1|&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="首行缩进以及让角标不缩进"><a class="markdownIt-Anchor" href="#首行缩进以及让角标不缩进"></a> 首行缩进以及让角标不缩进</h2><p>这事是我两分钟前才发现的。从前我打首行缩进都是用两个全角空格实现的，但这不符合markdown的设计哲学：markdown里的东西应该全是内容，首行缩进这种排版的事情应该交给css来实现。</p><p>当然，更重要的一个原因是换了新的渲染器之后渲染不出全角空格来了（</p><p>总之，我又<s>三</s>两分钟速成css了。叉会腰.jpg 解决方案如下：</p><p>在<code>themes\next\source\css</code>里新建一个<code>_custom</code>文件夹，然后新建一个<code>custom.styl</code>文件，输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> &#123; <span class="attribute">text-indent</span>: <span class="number">2em</span>; &#125;</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">sup</span> &#123; <span class="attribute">text-indent</span>: <span class="number">0em</span>; &#125;</span><br></pre></td></tr></table></figure><p>保存</p><p>然后在同目录下的<code>main.styl</code>最后一行加入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"_custom/custom"</span></span><br></pre></td></tr></table></figure><p>就完成啦！</p><hr /><p>再加一点微小的改动，就不单开一篇博文了</p><p>css里做的缩进只能应用于一个<code>&lt;p&gt;</code>模块的第一行，平时写文章还好，因为写一段换一个p中间换行空一点问题不大。</p><p>但是你们也知道有的时候这里还会发一些诗格式的东西……诗的话同一段里会有很多行(<code>&lt;br&gt;</code>)，但是只有第一行有缩进就很蠢。把每一行都单独写成一个<code>&lt;p&gt;</code>也很蠢，因为这样子行间距太大了……况且诗也不需要缩进啊。</p><p>这东西的解决方法是在swig里面判断一下有没有<code>post.poem</code>属性，如果为true，那就把全文外面额外套一个<code>&lt;div class=&quot;poem&quot;&gt;</code>。然后在css里让poem不缩进就好了。</p><p>（不过好像全文居中更好看一点？）</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">I Don't Give A S**t.<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天真的好肝啊……也不知道是因为公开出柜带来的快乐还是因为隔离了压力来源。但总之就是做了好多事情，以至于现在有一种贤者时间般的虚脱感。不码了，不码了，再也不码字了。&lt;/p&gt;
&lt;p&gt;今天早上做了个梦，想记下来；昨天早上看完了浅葱喵的那个视频，也想说点啥；这几天还一直在折腾这个博客的程序（我3分钟快速掌握JS可把我牛逼坏了叉会腰.jpg），也得记。&lt;/p&gt;
&lt;p&gt;前两者不说倒也没关系，不外乎就是又跟哪个小姑娘谈了个恋爱发生了一点跌宕的情节，或者是「我觉得同样是无限循环的时间还是石头门的铃羽线更真实一点」之类的。最后一个不记不行。根据我&lt;s&gt;数十年&lt;/s&gt;的软件工程经验，一个项目，如果你不把你做的每一点修改以及你为什么要这么做给记下来，那么日后你再想维护的时候就会面对一坨屎山……虽然现在这东西已经在往屎的方向发展，因为我已经忘了我前天搞了些啥了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="http://hereicome.tk/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="http://hereicome.tk/tags/Hexo/"/>
    
      <category term="JavaScript" scheme="http://hereicome.tk/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://hereicome.tk/tags/Node-js/"/>
    
      <category term="css" scheme="http://hereicome.tk/tags/css/"/>
    
      <category term="前端" scheme="http://hereicome.tk/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="讲给外行人的编程" scheme="http://hereicome.tk/tags/%E8%AE%B2%E7%BB%99%E5%A4%96%E8%A1%8C%E4%BA%BA%E7%9A%84%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>什么是量子计算机？</title>
    <link href="http://hereicome.tk/p/46387.html"/>
    <id>http://hereicome.tk/p/46387.html</id>
    <published>2020-02-22T15:28:45.000Z</published>
    <updated>2020-03-07T07:24:57.298Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这是我在知乎上对<a href="https://www.zhihu.com/question/373468198/answer/1032005529" target="_blank" rel="noopener">这个问题</a>的回答，因为辣鸡知乎吃我排版，再加上打开Markdown编辑器时候本来就在博客文件夹里，所以干脆就搬过来了。</p><p>这个答案会很长，我会尽量把对背景知识的需求压缩到高中数学和物理的大纲之内，相应的，也会牺牲一些严谨性和正确性。所以在看完这篇科普之后，万万不可对其中用到的一些比喻进行想当然地扩展与推广，会出大事的（指变成民科）。</p><p>//写完才发现尽管是一些很基础的线性代数但是还是不在高中数学范畴之中……emmmm没关系直接把结论记下来就好。</p><h2 id="比特与量子比特"><a class="markdownIt-Anchor" href="#比特与量子比特"></a> 比特与量子比特</h2><p>在经典计算机中，一个机器的「状态」的最小单位是比特（bit），可以是0/1，是VCC/GND，是带磁/消磁，总之是一种确定的，非此即彼的状态，是1就不能再是0，是VCC就不能是GND。</p><p>而在量子计算机中我们常听说，一个量子比特（Qubit）可以是1和0的叠加。常识与直觉会让我们以为这种叠加就是0.3, 0.5, 0.8 那样在数轴上从0和1中间选一个点。但事实上不是。在量子比特中，0和1不再是数轴上的两个点，他们实际上是两根<strong>互相垂直</strong>的数轴。为了避免混淆，我们引入新的符号<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\ket{0}</annotation></semantics></math></span></eq>和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\ket{1}</annotation></semantics></math></span></eq>来描述它们。你可以把<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mo>⋅</mo><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\ket{\cdot}</annotation></semantics></math></span></eq>理解成一种向量的标志，就像高中时用<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span></eq>来表示一个「名字叫做a的」向量一样。<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\ket{0}</annotation></semantics></math></span></eq>和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq>分别是名字叫做&quot;0&quot;的向量和名字叫做&quot;1&quot;的向量。</p><a id="more"></a><p>有了这个背景知识之后再去理解「叠加」就比较容易了。比如说一个Qubit <eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>Q</mi><mo stretchy="false">⟩</mo><mo>=</mo><mn>0.6</mn><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo>+</mo><mn>0.8</mn><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\ket{Q}=0.6\mathinner{|0\rangle}+0.8\mathinner{|1\rangle}</annotation></semantics></math></span></eq>,那么它就是这样子的一个向量：</p><p>【放一张图在这里】</p><p>好，到现在，最重要但是又反直觉的「叠加」就解释完了，接下来我们再来补充一些设定，按重要程度排序，越往后的越不用仔细理解（指一时半会也不能科普地讲清楚），看个热闹就行。</p><ul><li>一个量子比特的模长必须是1。也就是说，<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq>前面的系数的「平方和」得是1。</li><li>而系数的平方其实就是当我「观测」这个量子比特时候，会坍缩到<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>或者<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq>的概率，也就是说前面提到的那个Qubit<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>Q</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|Q\rangle}</annotation></semantics></math></span></eq>，在观测后会有36%的概率坍缩到<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>，有64%的概率坍缩到<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq></li><li>实际上前面的系数并不局限于实数，而可以是复数的……所以你注意到我把上面的「平方和」打了引号。</li><li>再实际上这作为系数的这几个复数具体是什么值其实不重要，重要的是它们之间的相对相位差。也就是说<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo>+</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">a\mathinner{|0\rangle}+b\mathinner{|1\rangle}</annotation></semantics></math></span></eq>和 <eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>i</mi><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo>+</mo><mi>b</mi><mi>i</mi><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">ai\mathinner{|0\rangle}+bi\mathinner{|1\rangle}</annotation></semantics></math></span></eq>其实是同一个量子态。</li><li>因为量子态可以看做是向量，那么从一个量子态变换到另一个量子态的操作就可以看作是矩阵。为了维护变换前后的模长都是1，这些矩阵必须是幺正矩阵(Unitary Matrix)。</li><li>两个量子态可以写到一起，比如说<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq>和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>可以写作<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>10</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|10\rangle}</annotation></semantics></math></span></eq>，也就是之前两个向量的张量积。</li></ul><h2 id="计算与量子计算"><a class="markdownIt-Anchor" href="#计算与量子计算"></a> 计算与量子计算</h2><p>经典计算是怎么做到的呢？用一句话来概括，就是搞一个机器，根据输入的不同状态(bits)，把自己变成，或者说输出按照预设的规则相对应的状态(bits)。</p><p>打个比方，比如说有一个机器，输入5和8，输出13；输入13和21，输出34，那我们就知道这是一个加法器了。加法器其实是一系列「门电路」的组合，而门电路就是最简单的，输入一个或两个bits，输出一个bit的机器。</p><p>同样的，量子计算也有自己的「门电路」，比如说量子AND门，就是可以输入<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq>,然后输出一个<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>的机器……且慢，这里有些地方不太对，不过暂时可以这么理解着。</p><p>第一个不太对的地方是，我们上一节里提到过，对量子态的操作必须由要由幺正矩阵来进行，而熟悉线性代数的读者都知道，幺正变换是可逆的。AND门显然不可逆，光知道答案是<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>是判断不出输入的到底是<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>01</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|01\rangle}</annotation></semantics></math></span></eq>还是<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>10</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|10\rangle}</annotation></semantics></math></span></eq>还是<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>00</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|00\rangle}</annotation></semantics></math></span></eq>的。所以光靠幺正变换没办法得到一个单纯的AND门</p><p>第二个不太对的地方是……如果输入的不是纯的<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq>或者<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>，而是它们的某种叠加怎么办？</p><p>对于第一个问题，我们的解决办法是：再最后再补一位Qubit，变成3个Qubit的输入，3个Qubit的输出。也就是说，如果要算1 AND 0，我们不仅要输入一个<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq>和一个<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>，还要补上一位，比如说这里补一个<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>，让整个输入变成<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>100</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|100\rangle}</annotation></semantics></math></span></eq>。而在输出的地方，前两位保持输入不变，在第三位输出计算结果与补入的那一位的异或值(XOR)。也就是说，输入<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>100</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|100\rangle}</annotation></semantics></math></span></eq>，输出就变成<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>101</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|101\rangle}</annotation></semantics></math></span></eq>。为什么？因为1 AND 0 = 0，而0 XOR 0 = 1，所以最后一位变成了1。</p><p>而对于第二个问题，不妨把一个量子门当成一个变换矩阵<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">\mathinner{A}</annotation></semantics></math></span></eq>，那么<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi mathvariant="normal">∣</mi><mn>100</mn><mo stretchy="false">⟩</mo><mo>=</mo><mi mathvariant="normal">∣</mi><mn>101</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">A\mathinner{|100\rangle}=\mathinner{|101\rangle}</annotation></semantics></math></span></eq>，而<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi mathvariant="normal">∣</mi><mn>111</mn><mo stretchy="false">⟩</mo><mo>=</mo><mi mathvariant="normal">∣</mi><mn>110</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">A\mathinner{|111\rangle}=\mathinner{|110\rangle}</annotation></semantics></math></span></eq>（因为1 AND 1 = 1，而 1 XOR 1 = 0）。好，如果现在的输入是某个叠加态，比如说 <eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mi mathvariant="normal">∣</mi><mn>100</mn><mo stretchy="false">⟩</mo><mo>+</mo><mi>β</mi><mi mathvariant="normal">∣</mi><mn>110</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\alpha\mathinner{|100\rangle}+\beta\mathinner{|110\rangle}</annotation></semantics></math></span></eq>，那么结果会是什么呢？</p><p>既然叠加和矩阵运算都是线性的，结果当然也是线性的，所以<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>α</mi><mi mathvariant="normal">∣</mi><mn>100</mn><mo stretchy="false">⟩</mo><mo>+</mo><mi>β</mi><mi mathvariant="normal">∣</mi><mn>110</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo><mo>=</mo><mi>α</mi><mi mathvariant="normal">∣</mi><mn>101</mn><mo stretchy="false">⟩</mo><mo>+</mo><mi>β</mi><mi mathvariant="normal">∣</mi><mn>110</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">A(\alpha\mathinner{|100\rangle}+\beta\mathinner{|110\rangle})=\alpha\mathinner{|101\rangle}+\beta\mathinner{|110\rangle}</annotation></semantics></math></span></eq>，发现了吗，这个机器同时进行了两个运算！</p><h2 id="有了这些之后量子计算机能干啥"><a class="markdownIt-Anchor" href="#有了这些之后量子计算机能干啥"></a> 有了这些之后量子计算机能干啥</h2><p>一个量子门能同时进行两个计算当然也能同时进行更多个，对于一个量子AND门来讲，他能同时把四种所有可能性（11、10、01、00）都算出来，但是这有什么用呢，输出的结果里面，四个答案都混在一起，分不出谁是谁啊？</p><p>那么，量子计算到底在哪个方面比经典计算机有优势呢？</p><p><strong>以下大量数学预警</strong>，趁现在去泡杯茶，然后开窗通风，深呼吸三次，再回来坐稳扶好——</p><p>考虑一个一般的问题，比如，判断<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>×</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a\times b</annotation></semantics></math></span></eq>是否等于<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1643</mn></mrow><annotation encoding="application/x-tex">1643</annotation></semantics></math></span></eq>(你猜我为什么选择这个数），这是一个经典计算机非常好解决的问题，稍有编程基础的同学都可以在非常低的时间复杂度内给出答案。</p><p>那么，在这个问题中，一台经典计算机表现得像什么东西呢？比方说，我们用32个bits的二进制数来表示<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span></eq>，（32-bit二进制数表示整数是计算机中非常常见的一种表达），再用32个bits来表示<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span></eq>，那么此时整台经典计算机就表现得像一个输入64个bits的函数 <eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>3</mn></msub><mo>…</mo><mo separator="true">,</mo><msub><mi>b</mi><mn>65</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(b_1,b_2,b_3 \dots ,b_{65})</annotation></semantics></math></span></eq> ，而这个函数的输出是一个bit，0代表不等于，1代表等于。</p><p>在经典计算机中，这样的函数是可以用一系列门电路的组合来实现的，而每一个经典门电路都有相对应的量子门电路，也就是说我们可以实现一个量子门电路组成的量子变换<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>,使得：</p><section><eqn><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>b</mi><mn>1</mn></msub><msub><mi>b</mi><mn>2</mn></msub><msub><mi>b</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>b</mi><mn>64</mn></msub><msub><mi>b</mi><mn>65</mn></msub><mo stretchy="false">⟩</mo><mo>=</mo><mi mathvariant="normal">∣</mi><msub><mi>b</mi><mn>1</mn></msub><msub><mi>b</mi><mn>2</mn></msub><msub><mi>b</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>b</mi><mn>64</mn></msub><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>b</mi><mn>64</mn></msub><mo stretchy="false">)</mo><mtext> xor </mtext><msub><mi>b</mi><mn>65</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">U_f\mathinner{|b_1b_2b_3...b_{64}b_{65}\rangle}=\mathinner{|b_1b_2b_3...b_{64}(f(b_1,b_2...b_{64}) \text{ xor } b_{65})\rangle}</annotation></semantics></math></span></eqn></section><p>总之就是，在输入的64位后面补一个<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>65</mn></msub></mrow><annotation encoding="application/x-tex">b_{65}</annotation></semantics></math></span></eq>，在输出的地方保持前64位不变，最后一位变成f函数的输出值与<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>65</mn></msub></mrow><annotation encoding="application/x-tex">b_{65}</annotation></semantics></math></span></eq>的异或。</p><p>到这一步，我们终于证明了，用经典计算机可以算出来的问题，用量子计算机可以——至少在复杂度上可以——和经典计算机算得一样快……不给力啊老湿。</p><p>但是，我们有一个<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>了，让我们看得再仔细一些，看看<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>到底能做些什么，比如说，我们假设前64位全部都缩写成<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|x\rangle}</annotation></semantics></math></span></eq>，然后最后一位输入<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><msqrt><mn>2</mn></msqrt></mfrac><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{2}}(\mathinner{|0\rangle}-\mathinner{|1\rangle})</annotation></semantics></math></span></eq>，会怎么样？</p><p>//方便起见接下来的推导当中我就不写可以提取出来的公系数了（也就是那个<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><msqrt><mn>2</mn></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{2}}</annotation></semantics></math></span></eq>），同学们读的时候记住每个量子态都把几个分量同时除以某个数让它的模长等于1就行</p><p>//但是我相信你们肯定会直接跳过的，哼</p><p>假设<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|x\rangle}</annotation></semantics></math></span></eq>是个没有叠加的纯态，那么<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span></eq>唯一确定。</p><section><eqn><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>U</mi><mi>f</mi></msub><mo stretchy="false">[</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo><mo>⊗</mo><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>U</mi><mi>f</mi></msub><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">⟩</mo><mo>−</mo><msub><mi>U</mi><mi>f</mi></msub><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">⟩</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">⟩</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">,</mo><mi mathvariant="normal">¬</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">⟩</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo><mo>⊗</mo><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">⟩</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">¬</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}U_f[\mathinner{|x\rangle}\otimes (\mathinner{|0\rangle}-\mathinner{|1\rangle})]&amp;=U_f\mathinner{|x,0\rangle}-U_f\mathinner{|x,1\rangle}\\&amp;= \mathinner{|x,f(x)\rangle}-\mathinner{|x,\neg f(x)\rangle}\\&amp;=  \mathinner{|x\rangle} \otimes  (\mathinner{|f(x)\rangle}- \mathinner{|\neg f(x)\rangle})\\\end{aligned}</annotation></semantics></math></span></eqn></section><p>那么，分情况讨论，如果<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(x)=0</annotation></semantics></math></span></eq>，则应用<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>进行变换之后的结果等于：</p><section><eqn><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo><mo>⊗</mo><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> \mathinner{|x\rangle} \otimes  (\mathinner{|0\rangle}- \mathinner{|1\rangle})</annotation></semantics></math></span></eqn></section><p>恰好跟输入一毛一样，而如果<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(x)=1</annotation></semantics></math></span></eq>,那么最后的结果就会等于：</p><section><eqn><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo><mo>⊗</mo><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> \mathinner{|x\rangle} \otimes  (\mathinner{|1\rangle}- \mathinner{|0\rangle})</annotation></semantics></math></span></eqn></section><p>但是我们又知道，对于一个量子态，它的系数是什么不重要，系数的相对相位差才重要，也就是说我们可以在<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|x\rangle}</annotation></semantics></math></span></eq>的每一个分量和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\mathinner{|1\rangle}- \mathinner{|0\rangle})</annotation></semantics></math></span></eq>前面都乘以一个<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span></eq>，得到</p><section><eqn><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo><mo>⊗</mo><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> (-\mathinner{|x\rangle}) \otimes  (\mathinner{|0\rangle}- \mathinner{|1\rangle})</annotation></semantics></math></span></eqn></section><p>至于叠加态嘛，因为纯态之间都是互相垂直的，所以可以简单的正交分解成不同的纯态分别计算然后再加回来。</p><p><strong>//好了刚才跳过的同学们，这里是你们的空降点</strong></p><p>也就是说，我们发现在最后一位输入<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><msqrt><mn>2</mn></msqrt></mfrac><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{2}}(\mathinner{|0\rangle}-\mathinner{|1\rangle})</annotation></semantics></math></span></eq>之后，经过<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>的神奇操作，这个作为补位的最后一个Qubit保持不变，但是前面的那个<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|x\rangle}</annotation></semantics></math></span></eq>，会在<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(x)=1</annotation></semantics></math></span></eq>的时候，神奇的变成<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">-\mathinner{|x\rangle}</annotation></semantics></math></span></eq>。那我要是把所有的纯态的可能，也就是从64个0到64个1这<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">2^{64}</annotation></semantics></math></span></eq>种纯态，全部都均匀地叠加在一起输入<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>机器，会怎样？</p><p>接下来的事情需要一些空间想象力，考虑到所有的可能性都叠加在一起之后的量子态依然是一个向量，我们就叫他<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\psi\rangle}</annotation></semantics></math></span></eq>吧，它不沿着任意一个坐标轴，而是均匀地与任意一个坐标轴保持着距离。</p><p>我们再考虑，所有能让<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(x)=1</annotation></semantics></math></span></eq>的可能的纯态叠加在一起，应该也是一个向量，而且会在这个空间中指出一个确定的方向。我们就叫它<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>好了。</p><p>现在，<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\psi\rangle}</annotation></semantics></math></span></eq>和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>两个向量在空间中张开了一个角度，它们确定了一个平面。在这个平面上，我们找到与<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>垂直的那个方向，叫它<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mover accent="true"><mi>a</mi><mo>ˉ</mo></mover><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\bar{a}\rangle}</annotation></semantics></math></span></eq>，然后把<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\psi\rangle}</annotation></semantics></math></span></eq>沿着这两个方向正交分解……</p><p>我们现在拥有<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\psi\rangle}</annotation></semantics></math></span></eq>的两个分量了，沿<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>方向的分量在应用一次<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>后会被反向，而沿<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mover accent="true"><mi>a</mi><mo>ˉ</mo></mover><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\bar{a}\rangle}</annotation></semantics></math></span></eq>方向的分量则保持不变。这意味着，<strong>每次进行<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>操作后，我们的<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\psi\rangle}</annotation></semantics></math></span></eq>都会对称于<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mover accent="true"><mi>a</mi><mo>ˉ</mo></mover><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\bar{a}\rangle}</annotation></semantics></math></span></eq>方向翻转。</strong></p><p>有了这个结论之后，我们已经有量子搜索的全貌的一半了。接下来我们要<strong>构造另一个矩阵<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span></eq>，它所对应的变化是，让一个向量对称于「所有纯态的叠加」<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">Ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\Psi\rangle}</annotation></semantics></math></span></eq>翻转</strong>。</p><p>注意这次的<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ψ</mi></mrow><annotation encoding="application/x-tex">\Psi</annotation></semantics></math></span></eq>是大写的，因为这次不是那个翻来翻去的向量，而是对称轴本身了。</p><p>这个矩阵如何构造，留给读者证明（逃）</p><p>//哎呀反正你只要知道这个矩阵是构造得出来的不就行了嘛！</p><p>最后一点点微小的工作是，在维度（指Qubit的数量）足够高，且能让<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(x)=1</annotation></semantics></math></span></eq>的x足够少的时候，<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">Ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\Psi\rangle}</annotation></semantics></math></span></eq>和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>是几乎垂直的，这使得<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">Ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\Psi\rangle}</annotation></semantics></math></span></eq>和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mover accent="true"><mi>a</mi><mo>ˉ</mo></mover><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\bar{a}\rangle}</annotation></semantics></math></span></eq>之间的夹角非常小，大约与<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><msqrt><mi>N</mi></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{N}}</annotation></semantics></math></span></eq>成正比。</p><p>好，接下来我们从<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">Ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\Psi\rangle}</annotation></semantics></math></span></eq>开始，先用<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>翻转一次，再用<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span></eq>翻转一次，再用<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">U_f</annotation></semantics></math></span></eq>翻转一次，再用<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span></eq>翻转一次……注意每次组翻转都会让我们的<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\psi\rangle}</annotation></semantics></math></span></eq>距离<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mover accent="true"><mi>a</mi><mo>ˉ</mo></mover><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\bar{a}\rangle}</annotation></semantics></math></span></eq>都增加<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>θ</mi></mrow><annotation encoding="application/x-tex">2\theta</annotation></semantics></math></span></eq>，在大约<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>π</mi><mn>4</mn></mfrac><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\frac{\pi}{4}\sqrt{N}</annotation></semantics></math></span></eq>次翻转之后，我们的<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>ψ</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|\psi\rangle}</annotation></semantics></math></span></eq>向量已经离<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>非常接近了。这个时候再对这个量子态进行观测，它就会有极高的概率坍缩到<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>上（如果<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>是个纯态），或者由更高的概率坍缩到组成<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>的某一个纯态上去（如果<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|a\rangle}</annotation></semantics></math></span></eq>是由少数几个可能的<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|x\rangle}</annotation></semantics></math></span></eq>叠加而来），终于的终于，我们用了<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>N</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{N})</annotation></semantics></math></span></eq>的时间复杂度，找到了一个能让<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(x)=1</annotation></semantics></math></span></eq>的<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span></eq>。</p><p><strong>经典计算机做得到吗！</strong></p><p>我们终于可以回去讲为什么是1643了，因为它是两个质数：31和53的乘积。也就是说这个问题其实是一个分解质因数的问题——这其实算便宜经典计算机了，毕竟分解质因数是有不用遍历所有可能性的搜索方法的，如果换一个别的搜索题，经典计算机可能就需要在整个可能性范围内用<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>N</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^N)</annotation></semantics></math></span></eq>的复杂度搜过来。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h2><ol><li>叠加态并不是数轴上1和0中间的某一个点，是互相垂直的<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq>向量和<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>向量的线性组合，且长度必须为1。</li><li>对量子比特进行观测它就会坍缩到<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|1\rangle}</annotation></semantics></math></span></eq>或者<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mn>0</mn><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\mathinner{|0\rangle}</annotation></semantics></math></span></eq>中的某一个，这个向量离谁更近坍缩到谁的概率就更大。</li><li>对量子比特进行操作需要保证操作的幺正性，这也是后面所有幺蛾子的基础</li><li>量子计算机确实能同时计算一大批输入，只要把输入叠加起来就行了，并没有什么卵用因为输出也都是叠加在一起的。</li><li>量子算法的真正牛逼之处是可以逐渐地让一个量子态坍缩到有效的答案的概率不断增加。而且增加得很快。</li><li>还有其他牛逼的量子算法就不展开讲了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我在知乎上对&lt;a href=&quot;https://www.zhihu.com/question/373468198/answer/1032005529&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个问题&lt;/a&gt;的回答，因为辣鸡知乎吃我排版，再加上打开Markdown编辑器时候本来就在博客文件夹里，所以干脆就搬过来了。&lt;/p&gt;
&lt;p&gt;这个答案会很长，我会尽量把对背景知识的需求压缩到高中数学和物理的大纲之内，相应的，也会牺牲一些严谨性和正确性。所以在看完这篇科普之后，万万不可对其中用到的一些比喻进行想当然地扩展与推广，会出大事的（指变成民科）。&lt;/p&gt;
&lt;p&gt;//写完才发现尽管是一些很基础的线性代数但是还是不在高中数学范畴之中……emmmm没关系直接把结论记下来就好。&lt;/p&gt;
&lt;h2 id=&quot;比特与量子比特&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#比特与量子比特&quot;&gt;&lt;/a&gt; 比特与量子比特&lt;/h2&gt;
&lt;p&gt;在经典计算机中，一个机器的「状态」的最小单位是比特（bit），可以是0/1，是VCC/GND，是带磁/消磁，总之是一种确定的，非此即彼的状态，是1就不能再是0，是VCC就不能是GND。&lt;/p&gt;
&lt;p&gt;而在量子计算机中我们常听说，一个量子比特（Qubit）可以是1和0的叠加。常识与直觉会让我们以为这种叠加就是0.3, 0.5, 0.8 那样在数轴上从0和1中间选一个点。但事实上不是。在量子比特中，0和1不再是数轴上的两个点，他们实际上是两根&lt;strong&gt;互相垂直&lt;/strong&gt;的数轴。为了避免混淆，我们引入新的符号&lt;eq&gt;&lt;span class=&quot;katex&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;⟩&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\ket{0}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;/eq&gt;和&lt;eq&gt;&lt;span class=&quot;katex&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;⟩&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\ket{1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;/eq&gt;来描述它们。你可以把&lt;eq&gt;&lt;span class=&quot;katex&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mo&gt;⋅&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;⟩&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\ket{\cdot}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;/eq&gt;理解成一种向量的标志，就像高中时用&lt;eq&gt;&lt;span class=&quot;katex&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&quot;true&quot;&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;⃗&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\vec{a}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;/eq&gt;来表示一个「名字叫做a的」向量一样。&lt;eq&gt;&lt;span class=&quot;katex&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;⟩&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\ket{0}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;/eq&gt;和&lt;eq&gt;&lt;span class=&quot;katex&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;⟩&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\mathinner{|1\rangle}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;/eq&gt;分别是名字叫做&amp;quot;0&amp;quot;的向量和名字叫做&amp;quot;1&amp;quot;的向量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="科学" scheme="http://hereicome.tk/categories/%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="量子信息" scheme="http://hereicome.tk/tags/%E9%87%8F%E5%AD%90%E4%BF%A1%E6%81%AF/"/>
    
      <category term="量子计算" scheme="http://hereicome.tk/tags/%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97/"/>
    
      <category term="线性代数" scheme="http://hereicome.tk/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Leela Zero 赶上AlphaGo Zero 了吗？</title>
    <link href="http://hereicome.tk/p/49632.html"/>
    <id>http://hereicome.tk/p/49632.html</id>
    <published>2020-02-16T10:38:45.000Z</published>
    <updated>2020-02-24T11:36:35.018Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>这事要从一个反射弧太长没能及时反应的官僚说起……</p></blockquote><p>在家隔离第不知道多少天，偶然间又刷到了<a href="https://www.youtube.com/watch?v=m13QHNMHAa4" target="_blank" rel="noopener">这组视频</a>。虽说这一整个特别企划在刚出来的时候我就已经看过一遍，但是下雨天打……谱子，闲着也是闲着嘛。更何况现在跟当初看棋时候的心境和环境也大不一样了，围棋AI早已飞入寻常百姓家，众筹算力分布式训练的开源AI Leela Zero<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="这东西有很多种读法，比如LeeZ，LeelaZ或者Leela Zero，本文写作时曾根据自己的语感任性挑选长短最合适的缩写来让句子的节奏舒服，成文后觉得太乱了于是全体改了回来，如有错漏还望包涵。">[1]</span></a></sup>更是自称达到了15803的ELO分数——作为对比，AlphaGo Zero在Nature paper里自称自己大概是5000分出头一点，差了三倍……过于悬殊的差异让人觉得更像是ELO的算法出了问题。那么在AlphaGo Zero留下惊鸿一瞥的两年半之后，由各位爱好者亲手一点一点训练出来的Leela Zero到底能不能望到在Google训练了40天的AlphaGo Zero的项背呢？</p><a id="more"></a><p>这俩姓Zero的围棋AI<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="事实上Leela Zero是照着AlphaGo Zero的论文重新实现的，两者可以说是孪生兄弟的关系。">[2]</span></a></sup>其实和人下棋很像：神经网络就是人的「棋感」，策略与估值两个输出端分别代表了该在哪里落子的「第一感」以及对于局势优劣的判断，而MCTS则是人下棋时的「计算」。所以我们在无法直接对局的情况下比较一个AI的棋力是否接近了另一个AI，也可以用类似人类棋手判断自己是否已经追赶上某个老前辈时候用的办法——看看自己跟不跟得上老前辈的棋谱呗。这里我们选用AG Zero对阵Master的第一局，也就是高川格老师在特别企划第2、3集中打的棋谱，采用GoReviewPartner挂机分析一晚上，看看Leela Zero对于这位老前辈的棋谱有些什么看法。</p><p>这整个实验（甚至都称不上实验）完全出于闲着也是闲着，所以自带了大量的干扰因素，比如说PO数不一样（我用的笔记本上GTX940M，还只有三分钟一手，而AlphaGo Zero用了四块TPU，而且好像也是三分钟一手……完全没法比），比如说AlphaGo Zero的对手是Master而不是自己所以没有办法体现在劣势局时的表现……但总之我们是一个非常「文学性」的比较，只是想判断Leela Zero到底看不看得懂AlphaGo Zero的棋而已，所以这些都可以不那么在意（逃）</p><h2 id="数据收集与预处理"><a class="markdownIt-Anchor" href="#数据收集与预处理"></a> 数据收集与预处理</h2><p>Leela Zero对于棋谱的分析数据在<a href="http://yuntingdian.com/goreviewpartner/" target="_blank" rel="noopener">Go Review Partner</a>的帮助下经过一晚的挂机终于收集完成，转化成CSV之后大概长这个样子：</p><p><img src="/images/0216/1.png" alt="" /></p><p>…………GRP的作者<a href="https://github.com/pnprog" target="_blank" rel="noopener">pnprog</a>是个法国人。虽然他住在中国并且非常热爱围棋，但我依然不确定他能读懂中文。However, pnprog, if you read this, please do add some explanations about the csv file into your documentation. 看了这一坨东西头都晕了，花了我好长时间去跟sgf里的信息作对比……</p><p>第一手不知道为什么转化成csv的时候丢失了Leela Zero的备选点，不过倒没什么所谓，反正执黑的是Master，而我们只关注AlphaGo Zero下的白棋就好。另外，在胜率超过95%之后，局势已经接龙<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="现代围棋比赛的梗，一旦一方胜率超过95%，观众就会在评论区玩成语接龙。">[3]</span></a></sup>，再行分析也没有意义，所以我们截取掉白棋胜率超过95%时的数据，也就是180手之后。在这里我们定义一些「术语」如下：</p><ul><li>若AlphaGo Zero的实战选点就是Leela Zero的推荐选点，那么称作Leela Zero「匹配」AlphaGo Zero的选点</li><li>若是AlphaGo Zero在实战中的选点在Leela Zero的分析中获得超过总PO数的5%的PO，我们就当作Leela Zero「想到了」、「看懂了」这一手棋，反之，则是「没看懂」、「没想到」。</li><li>在Leela Zero「想到了」的棋当中，Leela Zero认为自己推荐的最优选点比AlphaGo Zero的实战选点胜率差超过1%的，再加上所有「没想到」的棋，并称为Leela Zero「不同意」AlphaGo Zero的棋。</li><li>在所有「不同意」的棋中，令Leela Zero给出的最优选点的胜率为<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span></eq>,令AlphaGo Zero实战选点下一手黑棋Leela Zero给出的最优选点的胜率为<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span></eq>，比较<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">1-P_1</annotation></semantics></math></span></eq>（即走出Leela Zero选的点后Leela Zero自己认为的下一手黑棋的胜率）与<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span></eq>, 若<eq><span class="katex"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span></eq>更小，则说明Leela Zero认为还是AlphaGo Zero的选点能给黑棋更大的压力，记为Leela Zero「信服」，反之则为「不服」。</li></ul><h2 id="好来看棋吧"><a class="markdownIt-Anchor" href="#好来看棋吧"></a> 好，来看棋吧</h2><p>接下来就是Jupyter的工作了。根据以往的经验，在棋局的不同阶段AI的棋力会表现得有所不同，所以不妨把手数也考虑进来，画成直方图，看看在不同阶段Leela Zero与AlphaGo Zero的匹配度是怎样的：</p><p><img src="/images/0216/2.png" alt="" /><br />Emmmmmmmmm…… 丑是丑了点但是差不多有那么个意思了嘛！随便用个Gaussian平滑一下，大概还是能看出序盘时高而中盘降低的趋势的。</p><p><img src="/images/0216/3.png" alt="" /><br />注意到匹配率在75到100手之间有一个陡降，回顾棋局时，100手左右正是AlphaGo Zero的白棋把实地捞得差不多，而Master执黑用轻盈飘逸的外势在中腹围出超大模样的时候。在此之前，黑棋在观战的人眼中没有什么不满意的——自己的模样扩张的很好，棋的效率很高，配合也很完美，外势的潜力很大，与白棋的实地的交换中也没觉得有亏损的地方……甚至可以说是做到了尽善尽美。<br />然而Leela Zero此刻给出的胜率却仅剩下20%。<br />我不知道Master当时是如何看待自己的黑棋的，是和观战者一样觉得自己下得还不错，局势还大有可期？还是早已明白自己与白棋的交换中处处被动，迫不得已才放弃了实地选择了外势？如果下棋的是真人，倒还可以去采访采访，但是Master与整个Google的AlphaGo 家族已经齐齐整整地退隐江湖，所以到底是还不觉得自己有什么劣势的盲目自信，还是眼睁睁看着劣势逐渐扩大的无能为力，我们已经不得而知。唯一能知道的是，在100手之后，AlphaGo Zero精准针对黑棋外势之上的层层若有若无的薄弱之处，一套连招将黑棋中央潜力破坏殆尽。现在再回头看75到100手，黑棋的观感立刻从灵动飘逸变成了疲于奔命、首尾不能兼顾。直到白棋的收网接近尾声(125-150手)，Leela Zero也看清了AlphaGo Zero的一盘大棋<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="确实想不出有什么可以用来比喻「虽然开始时看不出好在哪里但是肯定是有长远考虑」的措辞了……带来了一些微妙的违和感。">[4]</span></a></sup>，于是匹配率又提升了回去。</p><p>这倒是不能说是因为Leela Zero跟不上AlphaGo Zero的思路，毕竟实战中白棋的这些招法，Leela Zero也大多是仔细考虑过的——只不过没有当作首选罢了。只能说，Leela Zero或许有自己的想法。毕竟在这长达180手的对Master的绞杀之中，AlphaGo Zero的90次出招，72次都在Leela Zero的考虑之中。完全意料之外的，或者草草看过一眼就排除掉的，只占20%。作为一个观战者来讲，这种结果可以说是非常能跟得上对局者了。</p><h2 id="那么leela-zero可以对alphago-zero指指点点了吗"><a class="markdownIt-Anchor" href="#那么leela-zero可以对alphago-zero指指点点了吗"></a> 那么Leela Zero可以对AlphaGo Zero指指点点了吗？</h2><p>在整个90手白棋之中，共有27手是Leela Zero认为有问题的——也就是说，对Leela Zero来说，AlphaGo Zero的选点是它不会考虑/考虑过后觉得不如自己的选点的。那么事实真的如此吗？我们不问执白的Leela Zero，而是去问一问执黑的Leela Zero，看看它面对AlphaGo Zero落子和面对自己落子之后，觉得哪个压力更大。</p><p><img src="/images/0216/4.png" alt="" /><br />在黑Leela Zero看来，这27手中有7手选点，是AlphaGo Zero的选点比白Leela Zero的选点更有威胁，而剩余的20手，黑Leela Zero都给白Leela Zero肯定的评价。从箱形图中可以看到，那些肯定评价的平均胜率差更高，但最大值却来自于否定的评价：AlphaGo Zero 134手神之一断，是Leela Zero始料未及，令黑棋胜率直接暴跌7.3%！</p><p>这么看来，现如今的Leela Zero，已经可以给当年的AlphaGo Zero一些小建议了，当然，不同的AI对局势判断不一样，那些建议也不一定是对是错，该听不该听。至于指指点点就别想了，再训练上个一年半载的吧。</p><h2 id="后续的手段和余味sup-idfnref5a-hreffn5-relfootnotespan-classhint-top-hint-error-hint-medium-hint-rounded-hint-bounce-aria-label都是围棋术语5spanasup"><a class="markdownIt-Anchor" href="#后续的手段和余味sup-idfnref5a-hreffn5-relfootnotespan-classhint-top-hint-error-hint-medium-hint-rounded-hint-bounce-aria-label都是围棋术语5spanasup"></a> 后续的手段和余味<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="都是围棋术语">[5]</span></a></sup></h2><p>实际上，AlphaGo Zero还有一张完全体自我对战的棋谱……对，是Zero vs Zero，对，只有一张。<br />等我换上了有牛逼显卡的台式电脑我就去再用那时候的Leela Zero以同样的方法研究研究那张棋谱。</p><p>写代码真好玩，我回忆起在新加坡的那个人生低潮期也是浑浑噩噩浮浮燥燥做什么事都不感兴趣，唯一能沉下心来专注个三四个小时的事情就是写林轩田老师的ML课的作业。也就是那个时候我放弃了物理决心改行学计算机，然后结束了一直以来的低迷又抬起头来向前走。<br />希望历史能重演一次吧。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">这东西有很多种读法，比如LeeZ，LeelaZ或者Leela Zero，本文写作时曾根据自己的语感任性挑选长短最合适的缩写来让句子的节奏舒服，成文后觉得太乱了于是全体改了回来，如有错漏还望包涵。<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">事实上Leela Zero是照着AlphaGo Zero的论文重新实现的，两者可以说是孪生兄弟的关系。<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">现代围棋比赛的梗，一旦一方胜率超过95%，观众就会在评论区玩成语接龙。<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">确实想不出有什么可以用来比喻「虽然开始时看不出好在哪里但是肯定是有长远考虑」的措辞了……带来了一些微妙的违和感。<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">都是围棋术语<a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这事要从一个反射弧太长没能及时反应的官僚说起……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在家隔离第不知道多少天，偶然间又刷到了&lt;a href=&quot;https://www.youtube.com/watch?v=m13QHNMHAa4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这组视频&lt;/a&gt;。虽说这一整个特别企划在刚出来的时候我就已经看过一遍，但是下雨天打……谱子，闲着也是闲着嘛。更何况现在跟当初看棋时候的心境和环境也大不一样了，围棋AI早已飞入寻常百姓家，众筹算力分布式训练的开源AI Leela Zero&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;这东西有很多种读法，比如LeeZ，LeelaZ或者Leela Zero，本文写作时曾根据自己的语感任性挑选长短最合适的缩写来让句子的节奏舒服，成文后觉得太乱了于是全体改了回来，如有错漏还望包涵。&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;更是自称达到了15803的ELO分数——作为对比，AlphaGo Zero在Nature paper里自称自己大概是5000分出头一点，差了三倍……过于悬殊的差异让人觉得更像是ELO的算法出了问题。那么在AlphaGo Zero留下惊鸿一瞥的两年半之后，由各位爱好者亲手一点一点训练出来的Leela Zero到底能不能望到在Google训练了40天的AlphaGo Zero的项背呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://hereicome.tk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="AI" scheme="http://hereicome.tk/tags/AI/"/>
    
      <category term="围棋" scheme="http://hereicome.tk/tags/%E5%9B%B4%E6%A3%8B/"/>
    
      <category term="Data Science" scheme="http://hereicome.tk/tags/Data-Science/"/>
    
      <category term="Jupyter" scheme="http://hereicome.tk/tags/Jupyter/"/>
    
      <category term="Python" scheme="http://hereicome.tk/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>因为我是所有人</title>
    <link href="http://hereicome.tk/p/54461.html"/>
    <id>http://hereicome.tk/p/54461.html</id>
    <published>2020-02-07T10:29:49.000Z</published>
    <updated>2020-02-28T07:18:22.007Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>因为我是狮子也是羔羊<br />是虔信徒也是革命者<br />是软弱也是坚强<br />是男也是女是老也是少是旧也是新</p><p>无数的灵魂与我相通<br />他们笑，他们哭，他们痛苦又无可奈何<br />他们贪婪，他们暴怒，他们恐惧他们麻木<br />所以我笑，我哭，我痛苦<br />我爱，我恨，我同情</p><p>雪要崩了<br />每一片雪花都是无辜的<br />因为我是所有人</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;因为我是狮子也是羔羊&lt;br /&gt;
是虔信徒也是革命者&lt;br /&gt;
是软弱也是
      
    
    </summary>
    
    
      <category term="文学" scheme="http://hereicome.tk/categories/%E6%96%87%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>昨晚说完晚安之后我又干了什么</title>
    <link href="http://hereicome.tk/p/10225.html"/>
    <id>http://hereicome.tk/p/10225.html</id>
    <published>2020-02-03T03:28:06.000Z</published>
    <updated>2020-02-24T11:48:02.532Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>0点45分，在道完晚安之后，因为看到票圈刷屏的20200202产生了恶作剧的念头，于是决定在随机的某一天也发一条「今天是公元纪年2020xxxx，这是人类历史上唯一的一天，以前从没有过，以后也再不会回来」。</p><p>但是光是随机某一天还不够爽，决定找个素数，于是打开PowerShell，打<code>python</code>，回车 ——出现了Python 2.6</p><p>我其实很少直接在命令行里写Python的，一般工作时不管是VSCode还是PyCharm还是Jupyter都自带环境，导致我日常写惯了Python 3。再加上似乎印象里有Python 2 已经停止维护的新闻，所以想着直接把这个2.6卸了。</p><a id="more"></a><p>不过刚才也提到了，我的PC里杂七杂八装了很多的Python环境，谁知道这个默认的2.6在哪里，于是今天的第一个知识点出现了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.executable</span><br></pre></td></tr></table></figure><p>找到了对应的Interpreter位置，又在文件夹里找到了uninstall.exe，第一步完成了。</p><p>接下来由于时间太晚意识模糊忘记了自己有Anaconda于是重新去官网下了个Python 3.8 按下不表……总之就当没有这一步也没什么区别。再次进PowerShell打<code>python</code>进入了Conda的base环境里的Python，问题来了：</p><blockquote><p>This Python interpreter is in a conda environment, but the environment has not been activated. Libraries may fail to load.</p></blockquote><p>（这也是个陈年老问题了，PowerShell里conda无法activate任何一个环境，之前试图activate非base的环境时候也不起效果）</p><p>因为在CMD里是可以正常activate的，而且测试了一下PowerShell不管activate哪个环境都会报这句警告。那么锁定在PowerShell的问题，google一查，解决方案也简单：在PowerShell里输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init powershell</span><br></pre></td></tr></table></figure><p>重启即可。</p><blockquote><p>第二个知识点：Conda 在powershell中需要额外的init，是我当初安装时候漏了这一步。</p></blockquote><p>但是这一切还没结束……因为在排查问题时候打开过了CMD，发现不管是CMD还是PowerShell那个字体和界面都实在太丑了……于是脑海中又冒出了很久以前似乎记得看到过关于Windows Terminal的新闻………………</p><p>当初看新闻的时候还只能自己下载源码自己build，当时也比较忙遂放弃。今天再看已经可以在windows应用商店下载了。美滋滋下了一个下来，发现这是一个UWP应用…</p><blockquote><p>插叙背景故事1： 因为觉得Ubuntu下那个Ctrl+Alt+T直接打开terminal很爽，所以我此前把这个快捷键跟PowerShell的快捷方式绑定了</p></blockquote><blockquote><p>插叙背景故事2： UWP app不像传统的windows 程序一样在安装目录下有个可执行文件……所以也找不到可以绑定快捷键的快捷方式</p></blockquote><p>如今我想把这个快捷方式改绑定到Windows Terminal上，继续感受快捷键开终端的快乐，于是我又开始了漫长的Google……</p><p>这个知识点不一定泛用，因为不知道别的UWP app有没有，但是Windows Terminal 确实还是能找到一个叫wt.exe 的可执行文件的（而且大小居然为0kb）。用Everything搜了一下，就在<code>C:\Users\[User-name]\AppData\Local\Microsoft\WindowsApps\</code>下，对这个exe生成一个快捷方式，把启动位置改成<code>%USERPROFILE%</code>，随便藏到一个什么地方，然后再绑定一下快捷键即可。</p><p>最后的问题是，我想在右键菜单里加入「在此处打开Windows Terminal」的功能。加入右键菜单很简单，写一个注册表项就行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@&#x3D;&quot;Windows terminal here&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@&#x3D;&quot;C:\\Users\\[User-name]\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span><br></pre></td></tr></table></figure><p>但是加入右键菜单后wt的起始位置依然是<code>%USERPROFILE%</code>，需要在wt的设置里，也就是<code>profile.json</code> 中<code>profiles</code>里的每一个terminal都加上一句</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"startingDirectory": "."</span><br></pre></td></tr></table></figure><p>即可。这也就是为什么之前设快捷方式的时候要把起始位置给固定下来。</p><p>折腾完这一切之后已经三点半了，看着精(hua)致(li)美(hu)观(shao)的WT界面终于可以心满意足去睡觉了……总觉得好像忘记了什么的样子？</p><p>//记下了这么多知识点倒也不是说有多少技巧想分享，只是在折腾的过程中发现这些步骤都是现学吧太花时间，记下来吧又太琐碎不成系统。<br />//但是一台自己用起来很爽很熟悉的电脑就是靠这些细节堆砌起来的，总之就先记在这里，省的未来哪天买了新电脑还要再折腾一遍。</p><hr /><p>好我想起来了，我一开始是要算个素数的来着。最近的素数日子是20200223，希望到了那一天你们还记得21天前你们是怎么刷爆我的朋友圈的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;0点45分，在道完晚安之后，因为看到票圈刷屏的20200202产生了恶作剧的念头，于是决定在随机的某一天也发一条「今天是公元纪年2020xxxx，这是人类历史上唯一的一天，以前从没有过，以后也再不会回来」。&lt;/p&gt;
&lt;p&gt;但是光是随机某一天还不够爽，决定找个素数，于是打开PowerShell，打&lt;code&gt;python&lt;/code&gt;，回车 ——出现了Python 2.6&lt;/p&gt;
&lt;p&gt;我其实很少直接在命令行里写Python的，一般工作时不管是VSCode还是PyCharm还是Jupyter都自带环境，导致我日常写惯了Python 3。再加上似乎印象里有Python 2 已经停止维护的新闻，所以想着直接把这个2.6卸了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://hereicome.tk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>想喝阔落</title>
    <link href="http://hereicome.tk/p/9183.html"/>
    <id>http://hereicome.tk/p/9183.html</id>
    <published>2020-02-01T06:13:17.000Z</published>
    <updated>2020-02-24T11:45:23.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>长了很久的草了，该除一除。</p><p>今天很神奇，一觉起来微博多了一个fo，同时来的是关于霜星的那条微博和关于口球的那条微博同时得到了她的点赞的通知……霜星那条都快两个月前了吧，这怎么被她翻出来的。</p><p>于是我也去翻了她两个月的微博，然后果断回fo。人太寂寞就是会这样子，遇到一个跟自己有几个tag重合的人就直接爱上的。稍微随意地本能地发挥了一下自己社工的技巧就找到了对方的博客（真的很好找）行8，我就是个stalker，我认罪。</p><p>看了几篇她的文章发现她写的比我意识流多了……突然提醒了我：有啥就写啥呗，长了这么久的草，白瞎了搭这么一个博客，忘记了初心。</p><p>甚至鼓起了勇气想去要一个友链，然后发现她的友链里的大佬们都好牛逼……dbq，打扰了。</p><p>他们都好厉害，而我好孤单。</p><p>若是我能耐得住寂寞也许我也能做成一些牛逼的事情，可是我好希望能有谁发现了我，找我说一句话，然后被我秒回，发现误入我方擅长领域被我一顿旁征博引口若悬河滔滔不绝讲个一天一夜不带停的。</p><p>毕竟当年我连快速排序都能讲出花来。</p><p>但现在想想可能只是当时那个小姑娘喜欢我。</p><p>回家快十天了，想喝阔落。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;长了很久的草了，该除一除。&lt;/p&gt;
&lt;p&gt;今天很神奇，一觉起来微博多了一个f
      
    
    </summary>
    
    
      <category term="日记" scheme="http://hereicome.tk/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>杂感一则</title>
    <link href="http://hereicome.tk/p/9799.html"/>
    <id>http://hereicome.tk/p/9799.html</id>
    <published>2019-12-16T04:24:08.000Z</published>
    <updated>2020-02-24T11:46:31.558Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>我也要成为那种我最讨厌的一句话里七八个专业名词但是实际上每一个我都不知道精确定义只是想当然地先用了再说的那种人了。真好，牛逼。幸运的是在社科领域的一个terminology在不同流派里可以有不同的定义，要是你觉得我哪里说错了，那这就是我自己的流派——但是依然要麻烦你顺便把别的流派是怎么定义的告诉我，让我挑一挑哪个长得更好看。</p></blockquote><a id="more"></a><p>如果说社会问题是道数学题的话，女权主义——或者女权主义运动——就是分部积分法：正确、有用，但不适用在所有问题上。</p><p>这个想法最开始的源头是尾巴老师的这条微博。</p><p><img src="/images/1216/weiba.jpg" alt="" /></p><p>说实话，在北大女生事件之后尾巴老师在我心中的形象就没有那种「对对对你说的太对了和我想的一毛一样」的伟光正了。这条微博更是让我看完之后有点生气。</p><p>生气太正常了，互联网上最容易做到的事情是惹别人生气，最难做到的事情是控制自己不生气，更何况我还被他用「其实就是」，「绝不会」，「纯粹立场条件反射」这种AOE擦到了边，造成了伤害。</p><p>因为我还是觉得：这个世界上就是有些事情是不能「下降」到性别的。你们女权主义要反对的要打破的是这个社会上广泛存在的、基于性别偏见与性别不平等的、对女性这个群体的掠夺与压迫（以下简称父权压迫）。但是光反对父权压迫解决不了全部的问题，因为这个社会上存在更普遍的、强权者对弱者的非人化、支配、压迫、掠夺。</p><p><img src="/images/1216/nvwang.jpg" alt="" /></p><p>就像女王这条微博我就很赞同——她并没有仅仅拘泥在性别议题而是把整个事情升华到了权力争夺上。（不过在这件事情上运用女权主义批判是没有错的，因为那些人间垃圾确实做了父权话语体系下对女性的压迫。这是范畴大与小、抽象与具体的区别，并非对与错的区别）试想芬兰总理不是女性，而是黑人，残疾人，年轻男性或者土著人，难道那些垃圾们就不散发恶臭了吗？不会的，他们只会换一种话术，使用其他武器去攻击，去掠夺权力，重建自己虚幻的物化与支配的快感。女权主义批判在这类问题上只能对这些恶意「缴械」，而非「根除」它们。</p><p>所以我不否认父权压迫的存在，也绝非基于维护父权的立场来拒绝尾巴老师把事事都联系到性别上去。你把我说成是父权这种垃圾东西的维护者，我就生你的气。</p><p>生气之余甚至有一些凄凉，因为在写完对女性压迫那一串之后觉得太长，想找个名词概括，脑子里自然而然就冒出了父权：很好，女权运动声势浩大，得到了广泛讨论，甚至我这种非科班出身没受过什么学术训练的也听说过这个词。但是写完对弱者压迫那一串之后我竟想不出别人是怎么概括这个事情的来。颇有一种明明参加的是人工智能学术会议但是举目望去全是神经网络论文的即视感。</p><p>P.S. 要不然自称「弱权主义」？</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我也要成为那种我最讨厌的一句话里七八个专业名词但是实际上每一个我都不知道精确定义只是想当然地先用了再说的那种人了。真好，牛逼。幸运的是在社科领域的一个terminology在不同流派里可以有不同的定义，要是你觉得我哪里说错了，那这就是我自己的流派——但是依然要麻烦你顺便把别的流派是怎么定义的告诉我，让我挑一挑哪个长得更好看。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="政治" scheme="http://hereicome.tk/categories/%E6%94%BF%E6%B2%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>如何优雅地使用刷图规划器</title>
    <link href="http://hereicome.tk/p/54259.html"/>
    <id>http://hereicome.tk/p/54259.html</id>
    <published>2019-12-09T02:00:44.000Z</published>
    <updated>2020-02-19T06:52:39.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><center> <I>如何优雅地水一篇博文</I> </center ></blockquote><br/><p>玩舟的朋友都知道，刷材料的时候规划器可以帮你节约<s>大量</s>一丢丢的理智。目前网络上的刷图规划器用的全部都是<a href="https://github.com/ycremar/ArkPlanner" target="_blank" rel="noopener">ycremar的ArkPlanner</a>，但是有不同的前端。</p><p>其中，<a href="https://aktools.graueneko.xyz/" target="_blank" rel="noopener">一只灰猫的明日方舟工具箱</a>整合了大部分的辅助功能，在计算材料需求方面体验非常好，输入库存和自动过滤功能也足够舒适，但是致命的问题是，不知道是网络通信的问题还是什么，它的规划器经常出现不给结果的情况……能不能用全看玄学。</p><a id="more"></a><p><a href="https://planner.penguin-stats.io/" target="_blank" rel="noopener">企鹅物流数据统计 X ArkPlanner</a>就没有这个问题，点完规划秒出结果。前端看起来似乎也比方舟工具箱要好看一点。只不过它没有自动计算需求的功能，所以需求得自己输入；没有过滤功能，所以输入库存的时候会把无关的材料也输进去；更神奇的是，这个网页上的材料顺序和游戏里的是不一致的，所以你需要滚来滚去地输入（……）总之就是体验极差。让人宁可手写JSON然后导入也不愿意在那个网页上输数字——至少JSON可以搞一个顺序正确的模版然后一路顺下来把库存一个个填上去。</p><p>好在就在几天前，方舟工具箱终于实现了JSON格式的导入/导出功能。虽然两个前端的格式并不兼容，但是毕竟都是JSON嘛……</p><p>那么整个工作流程就很明确了，在方舟工具箱里优雅地输入需求和功能，导出成JSON，随便搞个自动化转一转格式，再导入进企鹅物流里，最后点击计算规划。打完收工。</p><p>这时候就要提一嘴Python了，Python真是个好东西， Writing Python is basically writing English. 只要你知道了需求，接下来就是把你的需求用英语告诉电脑就行了。虽然我此前毫无处理JSON文件的经验，但是没有什么是在Python里import一个lib不能解决的——如果有，那就去Google一下你的需求，下载一个lib再import.</p><p>总之，因为理智快要满了但是新的刷图规划还没算出来，我开始挂机剿灭。然后完全从0开始Google，在打到大锤哥之前完成了下面这个东西：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"arktools.json"</span>,<span class="string">"r"</span>)</span><br><span class="line">line = f.read()</span><br><span class="line">line=line.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">dic = json.loads(line)</span><br><span class="line"></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dic.items():</span><br><span class="line">    item = &#123;&#125;</span><br><span class="line">    item[<span class="string">"name"</span>] = key</span><br><span class="line">    item[<span class="string">"have"</span>] = value[<span class="number">0</span>]</span><br><span class="line">    item[<span class="string">"need"</span>] = value[<span class="number">1</span>]</span><br><span class="line">    lst.append(item)</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"Penguin.json"</span>,<span class="string">"w"</span>)</span><br><span class="line">line = json.dumps(lst, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">line = line.encode(<span class="string">"utf-8"</span>)</span><br><span class="line">f.write(line)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>P.S. 虽然说企鹅物流那边已经不再计算技能书和芯片了但是把这些东西留在JSON里面导入是不会有影响的</p><p>P.S.S. 最终结果：<br /><img src="/images/1209/1.png" alt="" /></p><p>可以去给陨星专三咯</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt; &lt;I&gt;如何优雅地水一篇博文&lt;/I&gt; &lt;/center &gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;玩舟的朋友都知道，刷材料的时候规划器可以帮你节约&lt;s&gt;大量&lt;/s&gt;一丢丢的理智。目前网络上的刷图规划器用的全部都是&lt;a href=&quot;https://github.com/ycremar/ArkPlanner&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ycremar的ArkPlanner&lt;/a&gt;，但是有不同的前端。&lt;/p&gt;
&lt;p&gt;其中，&lt;a href=&quot;https://aktools.graueneko.xyz/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一只灰猫的明日方舟工具箱&lt;/a&gt;整合了大部分的辅助功能，在计算材料需求方面体验非常好，输入库存和自动过滤功能也足够舒适，但是致命的问题是，不知道是网络通信的问题还是什么，它的规划器经常出现不给结果的情况……能不能用全看玄学。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://hereicome.tk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>11月25日阴</title>
    <link href="http://hereicome.tk/p/26475.html"/>
    <id>http://hereicome.tk/p/26475.html</id>
    <published>2019-11-25T04:45:21.000Z</published>
    <updated>2020-02-24T11:43:56.933Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="讽刺一则"><a class="markdownIt-Anchor" href="#讽刺一则"></a> 讽刺一则：</h2><p>——你要把自由，平等与团结带给谁？</p><p>——给所有人。</p><p>——有的人眼界不够广，遭受了蒙骗，不想领你的好意怎么办？</p><p>——讽刺他们，辱骂他们，排挤他们，用奇怪的比喻段子恶心他们，气得他们更不想要，最好能把他们全气死，这样就只剩听我话的这些「自由人」了。</p><h2 id="骗人一则"><a class="markdownIt-Anchor" href="#骗人一则"></a> 骗人一则：</h2><p>——你想怎么当皇帝？</p><a id="more"></a><p>——搞乱局势，重新分配权力。</p><p>——混乱局势中真的有人想要搞自由平等团结怎么办？</p><p>——用我的傀儡攻击他们，用仇恨煽动他们，让他们以为彼此才最可恶，让他们团结不起来，威胁不到我的存在。</p><h2 id="元讽刺一则"><a class="markdownIt-Anchor" href="#元讽刺一则"></a> 元讽刺一则：</h2><p>——你想让谁发现自己的错误？</p><p>——那些有希望的年轻人。</p><p>——但他们受到了挑拨，沉溺于错误的斗争方式玩得可爽了怎么办？</p><p>——变成和他们一样的人，编笑话讽刺他们，夸张他们的行为，往最糟糕的方向滑坡他们，怎么愤怒多怎么来地刺伤他们，还幻想他们和一般人不一样会反思自己。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;讽刺一则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#讽刺一则&quot;&gt;&lt;/a&gt; 讽刺一则：&lt;/h2&gt;
&lt;p&gt;——你要把自由，平等与团结带给谁？&lt;/p&gt;
&lt;p&gt;——给所有人。&lt;/p&gt;
&lt;p&gt;——有的人眼界不够广，遭受了蒙骗，不想领你的好意怎么办？&lt;/p&gt;
&lt;p&gt;——讽刺他们，辱骂他们，排挤他们，用奇怪的比喻段子恶心他们，气得他们更不想要，最好能把他们全气死，这样就只剩听我话的这些「自由人」了。&lt;/p&gt;
&lt;h2 id=&quot;骗人一则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#骗人一则&quot;&gt;&lt;/a&gt; 骗人一则：&lt;/h2&gt;
&lt;p&gt;——你想怎么当皇帝？&lt;/p&gt;
    
    </summary>
    
    
      <category term="政治" scheme="http://hereicome.tk/categories/%E6%94%BF%E6%B2%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>11月19日晴</title>
    <link href="http://hereicome.tk/p/57814.html"/>
    <id>http://hereicome.tk/p/57814.html</id>
    <published>2019-11-19T05:04:30.000Z</published>
    <updated>2020-02-24T11:43:25.092Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>身体不适，头晕晕沉沉的，像是没睡好。</p><p>通风透气与没有噪音不可得兼，上淘宝看了看最便宜的主动降噪耳机也要300，小米的，还不知道好不好用。</p><p>我不过是想在床上看着视频补一觉。</p><p>秦川这个人玩游戏自己不看剧情的，盯着看就让人捉急。不过声线确实舒服，关了弹幕然后把眼神聚焦到屏幕后面三十厘米即可获得精致睡眠。</p><p>死亡搁浅风景不错，很有气氛。真有你的啊小岛秀夫。</p><p>哦，对了，说到弹幕。</p><a id="more"></a><p>搞这个博客本来就是写日记用的，却莫名其妙的聊了很多政治。这样不好。</p><p>要聊政治为什么不去公众号呢。</p><p>再加上我又是一个特别软弱的人，看到弹幕骂两句主播都会感到不适。当年看剑网3大师赛时候看弹幕会因为长歌门怎么还不削弱而喷起来就真的很难过。</p><p>不是因为难过我自己就是个长歌我不想被削，我只是难过这些人为什么可以为了这么无聊的事情这么生气暴躁失去理智，他们说的话真的很难听也真的很没有用。以及，人在「让别人生气」这件事情上为何这么有天赋。</p><p>甚至有的时候看到就事论事好好说话的人，就因为说的内容是争议性特别大的那种，就会本能地想到他被一群对立面的傻逼围着网暴，然后生理不适，然后想逃。</p><p>好吧，熊熊燃烧吧，反正大火已经点着了，空气里满是热浪的湍流。</p><p>湍流，湍流。这种哪怕只是盯着屏幕看着一堆微分方程都能让人患上习得性无助的东西。</p><p>更何况真真切切地身在其中呢。</p><p>不过好事也是有的，堵了快一周的马桶终于通了。</p><p>上海的超市里面的所有卷筒纸都明目张胆地写着加厚加韧，是我太天真，看着包装上畏畏缩缩写着一行小字「卫生间可用」就以为它有什么「虽然我沾水不易破但是我能智能识别马桶水并且自动溶解」的黑科技。</p><p>果然越小的字越没底气。最终找到了无芯的卷纸，在通完之后的马桶上做了实验，嗯，不会堵了。</p><p>希望这不是一个flag。</p><p>过两天去最近的小米之家试试耳机吧，也不远，九百多米。上海还是很好的，为各种不同生活习惯的人提供了技术上的支持。</p><p>虽然说保持这种程度包容是一个现代社会完全可以做到也应该做到的东西。但现实就是这么令人失望。谁知道呢，也许我的想法太超前了吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;身体不适，头晕晕沉沉的，像是没睡好。&lt;/p&gt;
&lt;p&gt;通风透气与没有噪音不可得兼，上淘宝看了看最便宜的主动降噪耳机也要300，小米的，还不知道好不好用。&lt;/p&gt;
&lt;p&gt;我不过是想在床上看着视频补一觉。&lt;/p&gt;
&lt;p&gt;秦川这个人玩游戏自己不看剧情的，盯着看就让人捉急。不过声线确实舒服，关了弹幕然后把眼神聚焦到屏幕后面三十厘米即可获得精致睡眠。&lt;/p&gt;
&lt;p&gt;死亡搁浅风景不错，很有气氛。真有你的啊小岛秀夫。&lt;/p&gt;
&lt;p&gt;哦，对了，说到弹幕。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="http://hereicome.tk/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>一个稍微冷静一点的自我剖析</title>
    <link href="http://hereicome.tk/p/10027.html"/>
    <id>http://hereicome.tk/p/10027.html</id>
    <published>2019-11-17T01:26:15.000Z</published>
    <updated>2020-02-24T11:45:56.420Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>仔细看看昨天那篇真是毫无结构逻辑也很乱……毕竟是突发奇想并不曾深思熟虑，加之家里来客也就无心再加删改。是我8好，我还是得（剥离某些trigger之后）再重新搞一篇解释这个事情。</p><h2 id="我想要的自由是什么"><a class="markdownIt-Anchor" href="#我想要的自由是什么"></a> 我想要的「自由」是什么</h2><p>就性这个话题而言，我理想中的世界是这样的：</p><ol><li>每个人都有发出性邀请/性暗示/性隐喻的自由，也有明确表达拒绝的自由。其相对应的义务则是真诚且平等地去尊重对方的这两项自由。</li><li>如果一次性行为是全体参与者均在意识清醒且出于性愉悦的目的下同意过的，那么这个性行为就是可以发生的。自愿渡让该权利的除外。</li></ol><a id="more"></a><p>之所以把暗示也包括在邀请里面是因为直接开口说「你好，我想跟你睡觉」是在太没情调……再加之我一直相信一段关系最美好的部分就在于小心翼翼互相试探那一步，是偷偷探过去然后被对方牵住的手，是打一把不够大的伞于是挤在一起的肩，是坐在单车后座上揽着对方的腰的手臂……无论是怎样的性别或主被动或谁先谁后的组合。</p><p>当然你要是说都是成年人了谁还有那功夫骑自行车啊直接一点好嘛那也没问题……毕竟只是把暗示加在里面又不是替换掉了直接邀请。但是出于个人的审美我确实不喜欢直来直去，就当我青春期还没过去吧。</p><h2 id="我之前错在哪儿"><a class="markdownIt-Anchor" href="#我之前错在哪儿"></a> 我之前错在哪儿</h2><p>其实我一直没有，或者说不敢仔细去想所谓的「成年人了直接一点」的流程是怎样的，一来二去看对眼了走上车回我家？</p><p>真糟糕，没有给谁拒绝的机会，甚至「上车回我家」这种对经济能力与社会地位不对等的暗示也让人隐约觉得弱势方的拒绝的自由被压制。这可能就是为什么我从审美上——即直觉或者说本能上——不喜欢这种交往模式。</p><p>不过话又说回来，谁说暧昧与试探的过程中就绝对不存在权力压迫了？</p><p>是我太天真了，象牙塔里呆太久了，甚至默认了每个人在讲黄段子之前都会先考虑考虑听众会不会感到冒犯。哪怕我一直承认权力压迫这种事情会存在，但是在我脑中的先验概率里它就是那么渺小，以至于我在考虑稍微复杂一点的情况时都会遗漏掉它。</p><p>这也就是为什么我刚刚看到MeToo的时候会害怕，害怕从此不再有粉红的青涩的关系，害怕要活在一个没有黄段子的无聊世界里。</p><h2 id="那么我现在怎么看metoo"><a class="markdownIt-Anchor" href="#那么我现在怎么看metoo"></a> 那么我现在怎么看MeToo</h2><p>其实没有很大的变化= =。<a href="/p/15424.html" title="这篇文章">这篇文章</a>里的观点依然有效。当初写的时候我就是剥离了个人感情甚至剥离了具体事例来写的。立场这种东西若是可以自顶向下的overwrite，就不要自底向上的update，因为后者很容易自相矛盾。</p><p>对于每一个喊出me too的姑娘，我依然愿意，并且觉得大家都应该给与各种方面的援助，包括法律上的，身心健康上的，社会上的等等。哪怕她做错了什么——找错了组织提错了罪名甚至误解了事实真相——我们也要帮她做正确的事情，给她应得的公平与正义。</p><p>但是对于把那些姑娘们组织起来的人，那些想要利用这一个个me too事件对这个社会做出些结构性的改变的人。我们依然要警惕他或者她或者他们是否别有用心或者混入了别有用心之人，依然要要求他们必须是伟大且极少犯错误的政治家与革命家否则大事不会成功，只会给弱者更多更深的伤害。毕竟要让世界变好何其之难，要让世界变糟糕却像熵增一样容易。</p><p>那么到底什么变了呢，可能就是我更讨厌那些自以为自己有些权力就可以随意剥夺他人自由的加害者了吧。以前没有意识到他们存在，现在想想那些嘴脸，可真够猥琐的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;仔细看看昨天那篇真是毫无结构逻辑也很乱……毕竟是突发奇想并不曾深思熟虑，加之家里来客也就无心再加删改。是我8好，我还是得（剥离某些trigger之后）再重新搞一篇解释这个事情。&lt;/p&gt;
&lt;h2 id=&quot;我想要的自由是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#我想要的自由是什么&quot;&gt;&lt;/a&gt; 我想要的「自由」是什么&lt;/h2&gt;
&lt;p&gt;就性这个话题而言，我理想中的世界是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个人都有发出性邀请/性暗示/性隐喻的自由，也有明确表达拒绝的自由。其相对应的义务则是真诚且平等地去尊重对方的这两项自由。&lt;/li&gt;
&lt;li&gt;如果一次性行为是全体参与者均在意识清醒且出于性愉悦的目的下同意过的，那么这个性行为就是可以发生的。自愿渡让该权利的除外。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="政治" scheme="http://hereicome.tk/categories/%E6%94%BF%E6%B2%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>今天不就事论事，今天剖我自己</title>
    <link href="http://hereicome.tk/p/49940.html"/>
    <id>http://hereicome.tk/p/49940.html</id>
    <published>2019-11-16T14:12:50.000Z</published>
    <updated>2020-02-24T11:44:37.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我好像突然明白了为什么me too刚刚掀起大潮时候我会本能的感到反感。</p><p>我本来想找个地方暗咯咯的说其实我觉得李小璐太可以原谅了，因为她会犯下这些错——对她确实犯错了这一点毋庸置疑——是因为这个社会还不够自由。于是我去翻很久以前在知乎上看到的一条想法作为援引。一年来我一直都只记得前几句的大概的意思，并且对他所描述的深以为然。终于今天我又看了一遍最后一句，原地720°螺旋醍醐灌顶恍然大悟，是我之前太天真也太理想化了。我明明懂得所有的道理，但就是没发现最简单的事实。</p><a id="more"></a><p><img src="/images/1116.png" alt="img" /></p><p>//倒也不能完全怪我，毕竟他早发了一个月，所以我并不能结合时事把最后一句理解透</p><p>我们从头说起，让我先来自我介绍一下：诸君，我喜欢黄段子。</p><p>学术一点来说，性隐喻。按米兰昆德拉的说法：「暗示有进一步性接触的可能，但又不保证这种可能一定会实现」</p><p>我是在大概五六年前严格控制自己讲黄段子的场合与对象的——因为我想要避免任何的造成对方不适或被冒犯甚至构成性骚扰的可能性。但是直到今年我才明白这种不适的来源：除却少部分的确实对性反感的之外，很多人讨厌黄段子并非因为这个段子的内容本身，而是因为它背后的猥琐气质与权力控制。</p><p>哦，权力控制，多么熟悉的字眼。此时我脑子里似乎都浮现出了油腻的中年人端起酒杯：「来小伙子我们走一个，你不喝就是不给我面子」</p><p>我曾经看过一篇文章指出，酒桌上的酒是不重要的，重要的是「我让你喝你就得喝的权力关系」</p><p>那么令人反感的黄段子大概也暗示着「我想睡你你就得跟我睡」的猥琐与狂妄自大。</p><p>我讨厌。</p><p>我对性的纯洁度要求高到了近乎洁癖的程度，熟悉我的人或许听过我总在反复强调的那句话：</p><p>「性就是性，不是用来谈判的手牌，不是用来交易的货币，不是用来赠予的礼物，也不是什么合同上的签名，性只是两个人(也许更多）互相吸引然后在彼此同意之后一起做快乐的事情而已。」</p><p>以至于有一次约炮结束之后我还反复确认：你真的只是因为感受到了性吸引才同意的吧？没有因为什么出于礼貌或者想拒绝但不好意思或者还有别的想法吧？</p><p>很没情调，我知道，我们这种刚想出点理想的理想主义者是这样的。</p><p>所以这种油腻猥琐的黄段子真的很·令·我·恶·心</p><p>这事情我似乎一直都明白，我还跟女票戏言过「搞开放式关系要趁早，毕竟我只喜欢二十来岁女大学生，但是如果我到了三四十岁的年纪我实在没法说服自己我在一个平等且互相尊重的关系里……」</p><p>可能我太以己度人了以至于我完全没有去仔细想过如果这种事情真的发生了会有多糟糕。</p><p>而我居然还在害怕未来要是变成没有黄段子的无聊世界会多可怕。</p><p>不过倒确实挺可怕的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我好像突然明白了为什么me too刚刚掀起大潮时候我会本能的感到反感。&lt;/p&gt;
&lt;p&gt;我本来想找个地方暗咯咯的说其实我觉得李小璐太可以原谅了，因为她会犯下这些错——对她确实犯错了这一点毋庸置疑——是因为这个社会还不够自由。于是我去翻很久以前在知乎上看到的一条想法作为援引。一年来我一直都只记得前几句的大概的意思，并且对他所描述的深以为然。终于今天我又看了一遍最后一句，原地720°螺旋醍醐灌顶恍然大悟，是我之前太天真也太理想化了。我明明懂得所有的道理，但就是没发现最简单的事实。&lt;/p&gt;
    
    </summary>
    
    
      <category term="政治" scheme="http://hereicome.tk/categories/%E6%94%BF%E6%B2%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>我们为什么要苛求完美的反抗者？</title>
    <link href="http://hereicome.tk/p/15424.html"/>
    <id>http://hereicome.tk/p/15424.html</id>
    <published>2019-11-14T01:44:38.000Z</published>
    <updated>2020-02-24T11:45:10.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>有一句话叫：「苛求完美受害者的旁观者，既是加害者的帮凶」。非常对，因为对受害者的完美性的要求，隐含的意思就是「你若不够完美，你就活该受害，就不值得同情」——这般落井下石冷漠无情的逻辑不是帮凶还是什么。</p><p>但是当对象变成了反抗者的时候，这个概念就模糊了起来。如果这个反抗者是独立的个体，他/她反抗的是其自身所遭受的压迫与不公正，诉求的是维护自己应得的权益，那么我们自然不该苛求他/她完美。不仅不该苛责其作为被压迫者的不完美，而且还要在其做出了不完美的反抗行为时（例如使用了错误的方式或误伤了错误的对象，以至于并不能有效维护自己的权益，甚至反过来伤害自己的时候）引导与帮助他/她，使其可以用正确有效的方式得到其应得的公义。但是当这个反抗者作为一个群体时，当他们所反抗的对象是某种社会性的、结构性的压迫与不公正时（无论这个压迫与不公正是否施加在这个群体自身之上），当他们的诉求是一个更好的结构时：苛求完美就变成了——不仅是旁观者而且还是反抗者队伍自身——都迫在眉睫要去做的事情。</p><a id="more"></a><p>因为不完美的反抗者队伍——或者具体点说，默许误伤存在而且还认为这是必要的牺牲的团体——是不可能带来更好的结构的，而且，会确确实实地，给世界带来大火。</p><p>原因有三。其一：默许误伤的存在会伤害到队伍的中坚力量，乃至动摇队伍根基。没有一个有良知的个体，在发现自己可能伤害了也许不该伤害的人之后，可以内心毫无芥蒂继续全心投入工作的；也没有一个个体，在惶惑不知自己会不会变成被斗争的对象时，愿意毫不犹豫地加入队伍帮助队伍的。如果一个队伍空有人高屋建瓴说着一些「这是必要的牺牲」的「超越性的宏大叙事」，却缺乏了真真切切去呼吁，去奔走，去言传身教，去与一个个具体的恶作斗争的人，试问这个队伍还算是有力量的吗？</p><p>其二：默许误伤的存在为投机分子窃取斗争果实大开方便之门。当所谓「必要的牺牲」得到承认时，也就是「新社会的准入权」被篡夺之时。投机分子完全可以伪装成热衷于反抗事业的样子，描绘着「没有歧视，没有压迫，没有不平等也没有你」的宏伟蓝图，篡权夺位，将异己一个个排除出去。到反抗者的工作结束之时，他们会惊讶地发现他们没有得到一个更好的新世界，只有那投机者与其朋党成了新的皇帝。这并非不可能，尤其要注意的一点是——在巧言令色玩弄政治的水平上，所谓的投机分子占据着绝对的优势。值得注意的是，在现实里的很多运动中，有质疑误伤者，有保持观望者，他们中的大部分都被反抗运动的发起队伍给打为帮凶大加鞭挞。他们真的是帮凶吗？还是说，他们只是某一两个掌握了话语权又用高超话术蒙骗了许多同志的，想要当新皇帝的人眼中的「异己」呢？毕竟你们这些人又不想跟我一起当皇帝，又不肯被我骗——你们让我很为难啊。</p><p>其三：默许误伤的存在从根本上来讲是不正义甚至是不自洽的。慷他人之慨之流的话别人已说过太多不再赘述，就算斗争之中流血牺牲不可避免，应当流的也是谭嗣同的血而不是康有为的。我们换个角度回过头来看看误伤这个行为本身，谁是受害者谁是加害者？有一种流行说法是：这些被误伤的人，他们所处的群体就是当今社会结构性不公的来源，所以他们就是雪崩时那不可能无辜的雪花。这不就又绕回到了「苛求完美受害者」的问题上了吗？因为他们被划入了某些群体，所以他们「活该」被伤害？</p><p>那么再回到「不能蕴含着不必」这一论点上来。作为个体，他/她并非全知全能，自然不能做到「完美的反抗」，所以他/她也不必。但是作为一个群体，通过组织与纪律的方式，控制一下所谓必要的牺牲，真的是完全做不到的事情吗？</p><p>毕竟，历史上那些真正推进过人类社会变革的事件里，好像都有一支军纪严明的军队呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一句话叫：「苛求完美受害者的旁观者，既是加害者的帮凶」。非常对，因为对受害者的完美性的要求，隐含的意思就是「你若不够完美，你就活该受害，就不值得同情」——这般落井下石冷漠无情的逻辑不是帮凶还是什么。&lt;/p&gt;
&lt;p&gt;但是当对象变成了反抗者的时候，这个概念就模糊了起来。如果这个反抗者是独立的个体，他/她反抗的是其自身所遭受的压迫与不公正，诉求的是维护自己应得的权益，那么我们自然不该苛求他/她完美。不仅不该苛责其作为被压迫者的不完美，而且还要在其做出了不完美的反抗行为时（例如使用了错误的方式或误伤了错误的对象，以至于并不能有效维护自己的权益，甚至反过来伤害自己的时候）引导与帮助他/她，使其可以用正确有效的方式得到其应得的公义。但是当这个反抗者作为一个群体时，当他们所反抗的对象是某种社会性的、结构性的压迫与不公正时（无论这个压迫与不公正是否施加在这个群体自身之上），当他们的诉求是一个更好的结构时：苛求完美就变成了——不仅是旁观者而且还是反抗者队伍自身——都迫在眉睫要去做的事情。&lt;/p&gt;
    
    </summary>
    
    
      <category term="政治" scheme="http://hereicome.tk/categories/%E6%94%BF%E6%B2%BB/"/>
    
    
  </entry>
  
</feed>
